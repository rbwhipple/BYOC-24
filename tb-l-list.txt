0000  c0047c  START:	CALL	CLRSCR	;CLEAR SCREEN
0001  6c0072  		LXI	IROM,MSG_WEL	;PRINT WELCOME MESSAGE
0002  c0047e  		CALL	MSGOUT	
0003  c00333  		CALL	CINIT	;COLD START (NEW PROGRAM)
0004  c00478  		CALL	NEWLINE	;SKIP A LINE
0005  c00343  WSTART:	CALL	WINIT	;WARM START (KEEP CURRENT PROGRAM)
0006  1c0003  		MVI	A,0B00000011	;RESET PUSH/POP & CALL/RETURN STACKS
0007  a381ff  		OUT	0XFF,A	
0008  c00478  		CALL	NEWLINE	;NEW LINE
0009  c00344  		CALL	GETLINE	;GET COMMAND OR STATEMENT
000a  c00478  		CALL	NEWLINE	;NEW LINE
000b  c0035e  		CALL	TSTL	;COMMAND OR PROGRAM LINE
000c  ec000f  		JNC	CMDPR	;IF A COMMAND, EXECUTE IT
000d  c003a0  		CALL	INSRT	;IF A PRGM LINE, INSERT/DELETE/REPLACE
000e  f00005  		JMP	WSTART	;REPEAT
000f  440006  CMDPR:	LDR	L,TXTSTRT	;POINT IRAM TO START OF TEXT IN INPUT BUFFER
0010  480007  		LDR	H,TXTSTRT+1	
0011  600000  		LDHL	IRAM	
0012  c00177  		CALL	GETKEY	;GET KEYWORD
0013  ec0039  		JNC	LET	;IF NO KEYWORD FOUND, PROCESS AS LET
0014  c0019e  		CALL	GETLINK	;IF FOUND, GET KEYWORD ADDRESS IN HL
0015  f20000  		PCHL		;GO PROCESS IT	?
0016  5c0100  STMPR:	LDX	A,(IRAM)	;UPDATE CURLBL FROM PROGRAM LINE NUMBER
0017  438201  		STR	CURLBL+1,A	
0018  620000  		INX	IRAM	
0019  5c0100  		LDX	A,(IRAM)	
001a  438200  		STR	CURLBL,A	
001b  620000  		INX	IRAM	;SKIP LINE LENGTH
001c  620000  		INX	IRAM	
001d  c00172  STMPRC:	CALL	SKIPSPACE	;SKIP ANY SPACES
001e  3c0200  		MOV	A,IRAML	;STORE START OF PROGRAM TEXT
001f  438206  		STR	TXTSTRT,A	
0020  3c0280  		MOV	A,IRAMH	
0021  438207  		STR	TXTSTRT+1,A	
0022  c00177  		CALL	GETKEY	;KEYWORD?
0023  ec0039  		JNC	LET	;IF NO KEYWORD FOUND, PROCESS AS LET
0024  c0019e  STMPRC0:	CALL	GETLINK	;IF SO, GET KEYWORD ADDRESS IN HL
0025  f20000  		PCHL		;PROCESS STATEMENT AT HL	?
0026  c00172  DONE:	CALL	SKIPSPACE	;SKIP ANY SPACES
0027  9c0b0d  DONEC0:	CPI	A,CR	;END OF LINE (CR)?
0028  e4048d  		JNZ	ERR4	;IF NOT, RAISE EXPECTED END OF LINE ERROR
0029  620000  		INX	IRAM	
002a  440000  		LDR	L,CURLBL	;GET CURRENT LABEL
002b  480001  		LDR	H,CURLBL+1	
002c  88a800  		OR	H,L	;A COMMAND (0 LABEL)
002d  e00005  		JZ	WSTART	;IF SO, GET A NEW LINE
002e  bc0000  		INP	A,CNTR_PORT	;GET KEYBOARD CHARACTER INTO A
002f  9c2240  		ANI	A,KBY_MASK	;CHARACTER AVAILABLE?
0030  e00034  		JZ	DONEC1	;IF NOT, CONTINUE
0031  bc0001  		INP	A,DATA_PORT	;GET THE ASCII CHARACTER
0032  9c0b5c  		CPI	A,ESCAPE	;ESCAPE CODE?
0033  e00005  		JZ	WSTART	;IF SO, DO A WARM START
0034  440004  DONEC1:	LDR	L,PRGEND	;CHECK FOR END OF PROGARM?
0035  480005  		LDR	H,PRGEND+1	
0036  790000  		CPHL	IRAM	
0037  e40016  		JNZ	STMPR	;IF NOT, CONTINUE TO NEXT PROGRAM LINE
0038  f00005  		JMP	WSTART	;OTHERWISE, END EXECUTION
0039  c00172  LET:	CALL	SKIPSPACE	:GET NEXT NONSPACE CHARACTER -  A VARIABLE?
003a  c0024c  		CALL	GETVARADRS	;GET THE VARIABLE'S ADDRESS
003b  ec0499  		JNC	ERR10	;IF NOT A VARIABLE, RAISE EXPECTED VARIABLE ERROR
003c  a10300  		PUSH	H	;SAVE ADDRESS ON PP STACK
003d  a08300  		PUSH	L	
003e  c00172  		CALL	SKIPSPACE	;GET NEXT NONSPACE CHARACTER
003f  9c0b3d  		CPI	A,'='	;EQUAL SIGN?
0040  e40485  		JNZ	ERR0	;IF NOT, RAISE SYNTAX ERROR
0041  620000  		INX	IRAM	;POINT NEXT CHARACTER
0042  c00172  		CALL	SKIPSPACE	;GET NEXT NONSPACE CHARACTER -AN EXPRESSION?
0043  c001a8  		CALL	EXPR	;EVALUATE IT
0044  c0027f  		CALL	STORE	;STORE THE RESULT
0045  f00026  		JMP	DONE	;DONE
0046  c00172  PRINT:	CALL	SKIPSPACE	;GET NEXT NONSPACE CHARACTER
0047  c00062  		CALL	PRINTLIT	;PRINT LITERAL("..TEXT..") IF PRESENT
0048  c00172  PRINTL0:	CALL	SKIPSPACE	;GET NEXT NON-SPACE CHARACTER
0049  9c0b3b  		CPI	A,';'	;SEMICOLON?
004a  e40052  		JNZ	PRINTC0	;IF NOT, CONTINUE
004b  1c0020  		MVI	A,' '	;PRINT SPACE
004c  c0046e  		CALL	CHROUT	
004d  620000  		INX	IRAM	;POINT NEXT PROGRAM CHARACTER
004e  c00172  PRINTE:	CALL	SKIPSPACE	;GET FIRST NON-SPACE CHARACTER
004f  9c0b0d  		CPI	A,CR	;END OF LINE?
0050  e00026  		JZ	DONE	;IF SO, DONE W/O NEW LINE
0051  f00046  		JMP	PRINT	;IF NOT, BACK FOR MORE ITEMS TO PRINT
0052  9c0b2c  PRINTC0:	CPI	A,','	;ZONE SPACING?
0053  e4005b  		JNZ	PRINTC1	;IF NOT, CONTINUE
0054  620000  		INX	IRAM	;POINT NEXT PROGRAM CHARACTER
0055  5c000a  PRINTL1:	LDR	A,ZONE	;GET ZONE COUNTER
0056  9c2207  		ANI	A,0B00000111	;MASK LOWER 3 BITS
0057  e0004e  		JZ	PRINTE	;IF ZERO, DONE
0058  1c0020  		MVI	A,' '	;PRINT A SPACE
0059  c0046e  		CALL	CHROUT	
005a  f00055  		JMP	PRINTL1	;BACK TO CHECK IF END OF ZONE REACHED
005b  9c0b0d  PRINTC1:	CPI	A,CR	;END OF LINE?
005c  e4005f  		JNZ	PRINTC2	;IF NOT, CONTINUE
005d  c00478  		CALL	NEWLINE	;NEW LINE
005e  f00026  		JMP	DONE	;DONE
005f  c001a8  PRINTC2:	CALL	EXPR	;ASSUME AN EXPRESSION AND EVALUATE IT
0060  c00070  		CALL	PRINTNUM	;PRINT NUMERIC RESULT
0061  f00048  		JMP	PRINTL0	;CHECK FOR END OF LINE
0062  5c0100  PRINTLIT:	LDX	A,(IRAM)	;GET CHARACTER
0063  9c0b22  		CPI	A,'"'	;BEGINNING QUOTATION MARK?
0064  dc0000  		RNZ		;IF NOT, RETURN	?
0065  620000  		INX	IRAM	;POINT NEXT PROGRAM CHARACTER
0066  5c0100  		LDX	A,(IRAM)	;GET CHARACTER
0067  c0046e  		CALL	CHROUT	;PRINT IT
0068  620000  PRINTLITL:	INX	IRAM	;POINT NEXT PROGRAM CHARACTER
0069  5c0100  		LDX	A,(IRAM)	;GET CHARACTER
006a  9c0b22  		CPI	A,'"'	;ENDING QUOTATION MARK?
006b  e0006e  		JZ	PRINTLITE	;IF SO, END IT
006c  c0046e  		CALL	CHROUT	;PRINT IT
006d  f00068  		JMP	PRINTLITL	;BACK FOR MORE CHARACTERS
006e  620000  PRINTLITE:	INX	IRAM	;POINT NEXT PROGRAM CHARACTER
006f  d00000  		RET		;RETURN	?
0070  a40200  PRINTNUM:	POP	L	;GET NUMBER OFF PP STACK
0071  a80200  		POP	H	
0072  880b80  		CPI	H,0B10000000	;NUMBER NEGATIVE?
0073  e80077  		JC	PRINTNUMC0	;IF NOT, CONTINUE
0074  c00327  		CALL	TWOCMP	;NEGATE IT
0075  1c002d  		MVI	A,'-'	;PRINT A MINUS SIGN
0076  c0046e  		CALL	CHROUT	
0077  3d0000  PRINTNUMC0:	MOV	A,H	;NUMBER IS ZERO?
0078  9ca800  		OR	A,L	
0079  140000  		MVI	C,0	;SUPPRESS LEADING ZEROS
007a  e40150  		JNZ	NUMOUT	;IF NOT, DISPLAY IT AND RETURN
007b  1c0030  		MVI	A,'0'	;PREPARE TO PRINT  ZERO
007c  f0046e  		JMP	CHROUT	;PRINT  ZERO AND RETURN
007d  440002  LIST:	LDR	L,PRGSTRT	;GET PROGRAM STARTING ADDRESS INTO IRAM
007e  480003  		LDR	H,PRGSTRT+1	
007f  600000  		LDHL	IRAM	
0080  4c0004  		LDR	E,PRGEND	;GET PROGRAM ENDING ADDRESS IN DE
0081  500005  		LDR	D,PRGEND+1	
0082  258000  LISTL0:	MOV	L,E	
0083  2a0000  		MOV	H,D	
0084  790000  		CPHL	IRAM	;REACHED PROGRAM END?
0085  e00005  		JZ	WSTART	;IF SO, DO A WARM START
0086  480100  		LDX	H,(IRAM)	;GET LINE NUMBER
0087  620000  		INX	IRAM	
0088  440100  		LDX	L,(IRAM)	
0089  140000  		MVI	C,0	;SUPPRESS LEADING ZEROS
008a  c00150  		CALL	NUMOUT	;PRINT LINE NUMBER
008b  620000  		INX	IRAM	;SKIP LINE LENGTH BYTE
008c  620000  		INX	IRAM	
008d  5c0100  LISTL1:	LDX	A,(IRAM)	;GET CHARACTER
008e  c0046e  		CALL	CHROUT	;PRINT IT
008f  620000  		INX	IRAM	;POINT NEXT CHARACTER
0090  9c0b0d  		CPI	A,CR	;IS IT A CARRIAGE RETURN (END OF LINE)?
0091  e4008d  		JNZ	LISTL1	;IF NOT, CONTINUE
0092  bc0000  		INP	A,CNTR_PORT	;GET KEYBOARD CHARACTER INTO A
0093  9c2240  		ANI	A,KBY_MASK	;CHARACTER AVAILABLE?
0094  e00082  		JZ	LISTL0	;IF NOT, CONTINUE
0095  bc0001  		INP	A,DATA_PORT	;GET THE ASCII CHARACTER
0096  9c0b5c  		CPI	A,ESCAPE	;ESCAPE CODE?
0097  e00005  		JZ	WSTART	;IF SO, DO A WARM START
0098  f00082  		JMP	LISTL0	;REACHED END OF PROGRAM?
0099  440002  RUN:	LDR	L,PRGSTRT	;POINT IRAM TO PROGRAM START ADDRESS
009a  480003  		LDR	H,PRGSTRT+1	
009b  600000  		LDHL	IRAM	
009c  440004  		LDR	L,PRGEND	;POINT IRAM TO PROGRAM START ADDRESS
009d  480005  		LDR	H,PRGEND+1	
009e  790000  		CPHL	IRAM	;AT END OF PROGRAM?
009f  e40016  		JNZ	STMPR	;IF NOT, GO TO STATEMENT PROCESSOR
00a0  f00005  		JMP	WSTART	;WARM START
00a1  c00478  STOP:	CALL	NEWLINE	;SKIP LINE
00a2  6c008e  		LXI	IROM,MSG_STOP	;PRINT STOP MESSAGE
00a3  c0047e  		CALL	MSGOUT	
00a4  440000  		LDR	L,CURLBL	;PRINT LINE NUMBER
00a5  480001  		LDR	H,CURLBL+1	
00a6  140000  		MVI	C,0	;SUPPRESS LEADING ZEROS
00a7  c00150  		CALL	NUMOUT	
00a8  f00005  		JMP	WSTART	;DONE - WARM START
00a9  c00172  GOTO:	CALL	SKIPSPACE	;GET LINE TARGET LINE NUMBER ON PP STACK
00aa  c001a8  		CALL	EXPR	
00ab  ac0200  		POP	E	LOAD IT INTO DE
00ac  b00200  		POP	D	
00ad  c00136  		CALL	FNDLBL	;FIND THE TARGET LINE NUMBER
00ae  ec0491  		JNC	ERR6	;ON CARRY RESET, RAISE UNKNOWN LINE NUMBER ERROR
00af  600000  		LDHL	IRAM	;POINT IRAM TO NEW LINE
00b0  f00016  		JMP	STMPR	;GO PROCESS IT
00b1  c00172  IF:	CALL	SKIPSPACE	;SKIP TO FIRST NONSPACE CHARACTER
00b2  c001a8  		CALL	EXPR	;GET FIRST VALUE ON PP STACK
00b3  140080  		MVI	C,0B10000000	;SET FIRST PASS BIT 7 IN RELOP STATUS BYTE
00b4  c00172  IFL0:	CALL	SKIPSPACE	;GET FIRST RELATIONAL OPERATOR (RELOP)
00b5  9c0b3c  		CPI	A,'<'	;LESS THAN?
00b6  e400b9  		JNZ	IFC0	;IF NOT, CONTINUE
00b7  942a01  		ORI	C,0B00000001	;SET LESS THAN BIT 0
00b8  f000c4  		JMP	IFC3	;LOOK FOR NEXT RELOP
00b9  9c0b3e  IFC0:	CPI	A,'>'	;GREATER THAN?
00ba  e400bd  		JNZ	IFC1	;IF NOT , CONTINUE
00bb  942a02  		ORI	C,0B00000010	;SET GREATER THAN BIT 1
00bc  f000c4  		JMP	IFC3	;LOOK FOR NEXT RELOP
00bd  9c0b3d  IFC1:	CPI	A,'='	;EQUAL?
00be  e400c1  		JNZ	IFC2	;IF NOT, CONTIINUE
00bf  942a04  		ORI	C,0B00000100	;SET EQUAL BIT 2
00c0  f000c4  		JMP	IFC3	;CONTINUE
00c1  940b80  IFC2:	CPI	C,0B10000000	;FIRST PASS?
00c2  ec0491  		JNC	ERR6	;RAISE EXPECTED RELOP ON FIRST PASS ERROR
00c3  f000c9  		JMP	IFC4	;CONTINUE
00c4  620000  IFC3:	INX	IRAM	;POINT NEXT RELOP OPERATOR (IF ANY)
00c5  940b80  		CPI	C,0B10000000	;FIRST PASS?
00c6  e800c9  		JC	IFC4	;IF NOT, THEN CONTINUE
00c7  942207  		ANI	C,0B00000111	;MASK OFF FIRST PASS BIT AND DO SECOND PASS
00c8  f000b4  		JMP	IFL0	
00c9  c00172  IFC4:	CALL	SKIPSPACE	;GET SECOND VALUE
00ca  428218  		STR	ROFLAG,C	;SAVE C
00cb  c001a8  		CALL	EXPR	
00cc  c00293  		CALL	SUB	;SUBTRACT THE TWO VALUES
00cd  a40200  		POP	L	;RESULT 0?
00ce  a80200  		POP	H	
00cf  540018  		LDR	C,ROFLAG	;RESTORE C
00d0  3d0000  		MOV	A,H	
00d1  9ca800  		OR	A,L	
00d2  e400d7  		JNZ	IFC5	;IF NOT, CONTINUE
00d3  3e8000  		MOV	A,C	;EQUAL BIT SET?
00d4  9c2204  		ANI	A,0B00000100	
00d5  e4001d  		JNZ	STMPRC	;IF SO, PROCESS THEN
00d6  f000e1  		JMP	IFDONE	;IF NOT, THEN DONE
00d7  880b80  IFC5:	CPI	H,0B10000000	;RESULT<0?
00d8  e800dd  		JC	IFC6	;IF NOT, CONTINUE
00d9  3e8000  		MOV	A,C	;LESS THAN BIT SET?
00da  9c2201  		ANI	A,0B00000001	
00db  e4001d  		JNZ	STMPRC	;IF SO, THEN PROCESS THEN
00dc  f000e1  		JMP	IFDONE	;IF NOT, THEN DONE
00dd  3e8000  IFC6:	MOV	A,C	;GREATER THAN BIT SET?
00de  9c2202  		ANI	A,0B00000010	
00df  e4001d  		JNZ	STMPRC	;IF SO, THEN PROCESS THEN
00e0  f000e1  		JMP	IFDONE	;IF NOT, THEN DONE
00e1  5c0100  IFDONE:	LDX	A,(IRAM)	;FIND CR
00e2  9c0b0d  		CPI	A,CR	
00e3  e00026  		JZ	DONE	;IF FOUND, THEN DONE
00e4  620000  		INX	IRAM	
00e5  f000e1  		JMP	IFDONE	
00e6  280280  GOSUB:	MOV	H,IRAMH	;PUT RETURN ADDRESS ON PP STACK
00e7  240200  		MOV	L,IRAML	
00e8  a10300  		PUSH	H	
00e9  a08300  		PUSH	L	
00ea  f000a9  		JMP	GOTO	;TRANSFER EXECUTION TO LINE NUMBER
00eb  a40200  RETURN:	POP	L	;GET RETURN ADDRESS OFF PP STACK
00ec  a80200  		POP	H	
00ed  600000  		LDHL	IRAM	;POINT IRAM THERE
00ee  f000e1  		JMP	IFDONE	;FIND "CR" CHARACTER AND TRANSFER EXECUTION
00ef  c00172  INPUT:	CALL	SKIPSPACE	;SKIP TO FIRST NONSPACE
00f0  c0024c  		CALL	GETVARADRS	;GET VARIABLE ADDRESS IN HL
00f1  ec0493  		JNC	ERR7	;IF NOT A VARIABLE, RAISE EXPECTED VARIABLE ERROR
00f2  a10300  		PUSH	H	;PUT HL ON PP STACK
00f3  a08300  		PUSH	L	
00f4  3c0200  		MOV	A,IRAML	;SAVE CURRENT IRAM ADDRESS
00f5  438219  		STR	INPTR,A	
00f6  3c0280  		MOV	A,IRAMH	
00f7  43821a  		STR	INPTR+1,A	
00f8  1c003f  		MVI	A,'?'	;PRINT A QUESTION MARK
00f9  c0046e  		CALL	CHROUT	
00fa  c00346  		CALL	BUFIN	;GET VALUE IN INPUT BUFFER
00fb  680000  		LXI	IRAM, BUFSTRT	;POINT IRAM TO START OF INPUT BUFFER
00fc  c00172  		CALL	SKIPSPACE	;SKIP SPACES
00fd  c00263  INPUTC0:	CALL	GETNUM	;GET THE VALUE ON STACK
00fe  c0027f  		CALL	STORE	;STORE IT
00ff  440019  		LDR	L,INPTR	;RESTORE IRAM TO PROGRAM LINE
0100  48001a  		LDR	H,INPTR+1	
0101  600000  		LDHL	IRAM	
0102  f00026  		JMP	DONE	;DONE
0103  c00333  NEW:	CALL	CINIT	;DO COLD START
0104  f00005  		JMP	WSTART	;BACK TO MAIN LOOP 1
0105  240200  LOAD:	MOV	L,IRAML	;GET CURRENT PROGRAM ADDRESS IN HL
0106  280280  		MOV	H,IRAMH	
0107  c00333  		CALL	CINIT	;INITIALIZE FOR NEW PROGRAM
0108  600000  		LDHL	IRAM	;CURRENT PROGRAM ADDRESS INTO IRAM
0109  c00172  		CALL	SKIPSPACE	;SKIP TP FIRST NONSPACE
010a  c00263  		CALL	GETNUM	;GET THE PROGRAM TO LOAD NUMBER ON PP STACK
010b  a40200  		POP	L	;THEN INTO HL
010c  a80200  		POP	H	
010d  6c00ae  		LXI	IROM,PREPRGM	;POINT IROM TO START ADDRESS OF LOADED PROGRAMS
010e  84a800  LOADL0:	OR	L,L	;LOAD THIS PROGRAM? (NOTE: ASSUMES COUNT<256)
010f  e0011a  		JZ	LOADC0	;IF SO, CONTINUE
0110  660000  LOADL1:	INX	IROM	;LOOK FOR NEXT PROGRAM
0111  5c0300  		LDX	A,(IROM)	
0112  9c0bfe  		CPI	A,0XFE	
0113  e4010e  		JNZ	LOADL0	
0114  660000  		INX	IROM	;POINT NEXT IROM BYTE
0115  5c0300  		LDX	A,(IROM)	
0116  9c0bff  		CPI	A,0XFF	;END OF PROGRAMS?
0117  e0049b  		JZ	ERR11	;RAISE NO PROGRAM ERROR
0118  846800  		DCR	L	;DECREMENT PROGRAM COUNTER
0119  f0010e  		JMP	LOADL0	
011a  040000  LOADC0:	MVI	L,LO(BUFSTRT)	;POINT HL TO PROGRAM START ADDRESS
011b  080000  		MVI	H,HI(BUFSTRT)	
011c  5c0300  LOADL2:	LDX	A,(IROM)	;GET PROGRAM TO LOAD CHARACTER
011d  9fa800  		OR	A,A	;END OF LINE?
011e  e00124  		JZ	LOADC1	;IF SO, CONTINUE
011f  238000  		MOV	M,A	;STORE IT IN INPUT BUFFER
0120  840201  		ADI	L,1	;POINT TO NEXT BYTE
0121  881200  		ACI	H,0	
0122  660000  		INX	IROM	
0123  f0011c  		JMP	LOADL2	;REPEAT
0124  00000d  LOADC1:	MVI	M,CR	;PLACE CARRIAGE RETURN AT END OF LINE
0125  c0035e  		CALL	TSTL	;COMMAND OR STATEMENT (TO INSERT)
0126  ec000f  		JNC	CMDPR	;IF A COMMAND, GO EXECUTE IT
0127  c003a0  		CALL	INSRT	;INSERT THE LINE
0128  660000  		INX	IROM	
0129  5c0300  		LDX	A,(IROM)	
012a  9c0bfe  		CPI	A,0XFE	;END OF PROGRAM?
012b  e00005  		JZ	WSTART	;IF SO, DO A WARM START
012c  f0011a  		JMP	LOADC0	;REPEAT
012d  440006  REM:	LDR	L,TXTSTRT	;GET START OF TEXT
012e  480007  		LDR	H,TXTSTRT+1	
012f  600000  		LDHL	IRAM	;POINT IRAM TO START OF TEXT
0130  630000  		DCX	IRAM	;BACK ONE LOCATION
0131  440100  		LDX	L,(IRAM)	;GET STATEMENT LENGTH IN HL
0132  080000  		MVI	H,0	
0133  610000  		ADHL	IRAM	;POINT IRAM TO START OF NEXT STATEMENT
0134  630000  		DCX	IRAM	;BACK TO CR
0135  f00026  		JMP	DONE	;DONE
0136  440002  FNDLBL:	LDR	L,PRGSTRT	;GET START OF PROGRAM IN HL
0137  480003  		LDR	H,PRGSTRT+1	
0138  540004  		LDR	C,PRGEND	;GET END OF PROGRAM IN BC
0139  580005  		LDR	B,PRGEND+1	
013a  8b0900  FNDLBLL:	CMP	H,B	;REACHED END OF PROGRAM?
013b  e4013e  		JNZ	FNDLBLC0	
013c  868900  		CMP	L,C	
013d  d80000  		RZ		;IF SO, RETURN CARRY RESET	?
013e  820900  FNDLBLC0:	CMP	M,D	;MS BYTE MATCH?
013f  e40148  		JNZ	FNDLBLC1	;IF NOT,  SKIP TO NEXT LINE
0140  840201  		ADI	L,1	;POINT LS BYTE
0141  881200  		ACI	H,0	
0142  818900  		CMP	M,E	;LSB MATCH?
0143  e4014a  		JNZ	FNDLBLC2	;IF NOT, SKIP TO NEXT LINE
0144  840a01  		SUI	L,1	;FOUNT IT!
0145  881a00  		SBI	H,0	;POINT BACK TO START OF LINE
0146  807000  		STC		;SET CARRY	?
0147  d00000  		RET		;RETURN	?
0148  840201  FNDLBLC1:	ADI	L,1	;POINT NEXT BYTE (LSB)
0149  881200  		ACI	H,0	
014a  840201  FNDLBLC2:	ADI	L,1	;POINT NEXT BYTE (LINE LENGTH)
014b  881200  		ACI	H,0	
014c  3c0000  		MOV	A,M	;GET LENGTH OF LINE IN A
014d  878000  		ADD	L,A	;COMPUTE NEW LINE START
014e  881200  		ACI	H,0	
014f  f0013a  		JMP	FNDLBLL	;TRY AGAIN
0150  a38300  NUMOUT:	PUSH	A	;SAVE IT
0151  a20300  		PUSH	D	;SAVE DE
0152  a18300  		PUSH	E	
0153  0c0010  		MVI	E,LO(10000)	;DISPLAY 10000'S DIGIT
0154  100027  		MVI	D,HI(10000)	
0155  c00166  		CALL	CNVRT	
0156  0c00e8  		MVI	E,LO(1000)	;DISPLAY 1000'S DIGIT
0157  100003  		MVI	D,HI(1000)	
0158  c00166  		CALL	CNVRT	
0159  0c0064  		MVI	E,LO(100)	;DISPLAY 100'S DIGIT
015a  100000  		MVI	D,HI(100)	
015b  c00166  		CALL	CNVRT	
015c  0c000a  		MVI	E,LO(10)	;DISPLAY 10'S DIGIT
015d  100000  		MVI	D,HI(10)	
015e  c00166  		CALL	CNVRT	
015f  840230  		ADI	L,48	
0160  3c8000  		MOV	A,L	
0161  c0046e  		CALL	CHROUT	
0162  ac0200  		POP	E	;RESTORE DE AND A
0163  b00200  		POP	D	
0164  bc0200  		POP	A	
0165  d00000  		RET			?
0166  1c00ff  CNVRT:	MVI	A,255	;INITIALIZE COUNT = -1
0167  9c0201  CNVRTL0:	ADI	A,1	;INCREMENT AND STORE COUNT
0168  858800  		SUB	L,E	
0169  8a1800  		SBB	H,D	
016a  ec0167  		JNC	CNVRTL0	;IF RESULT NOT NEGATIVE, SUBTRACT AGAIN
016b  858000  		ADD	L,E	
016c  8a1000  		ADC	H,D	
016d  9e8900  		CMP	A,C	;SUPPRESS ZEROS?
016e  d80000  		RZ		;IF SO, DON'T DISPLAY THE DIGIT	?
016f  946800  		DCR	C	;TURN OFF ZERO SUPPRESSION FLAG
0170  9c0230  		ADI	A,48	ADD ASCII BIAS
0171  f0046e  		JMP	CHROUT	;DISPLAY THE DIGIT
0172  5c0100  SKIPSPACE:	LDX	A,(IRAM)	;GET CHARACTER
0173  9c0b20  		CPI	A,' '	;A SPACE?
0174  dc0000  		RNZ		;IF NOT , RETURN	?
0175  620000  		INX	IRAM	;POINT NEXT BYTE IN DATA RAM
0176  f00172  		JMP	SKIPSPACE	;REPEAT
0177  300280  GETKEY:	MOV	D,IRAMH	;GET CURRENT START OF TEXT
0178  2c0200  		MOV	E,IRAML	
0179  6c0018  		LXI	IROM,KEYTBL	;POINT IROM TO START OF KEWWORD TABLE
017a  140000  GETKEYL0:	MVI	C,0	;ZERO KEYWORD LINK TABLE COUNTER
017b  2a0000  GETKEYL1:	MOV	H,D	;RESTORE IRAM TO START OF TEXT
017c  258000  		MOV	L,E	
017d  600000  		LDHL	IRAM	
017e  580100  GETKEYL2:	LDX	B,IRAM	;GET TEXT BYTE
017f  9822df  		ANI	B,0B11011111	;MAKE UPPER CASE
0180  5c0300  		LDX	A,(IROM)	;GET KEY TABLE BYTE
0181  9c227f  		ANI	A,0B01111111	;MASK OFF MSBIT
0182  9f0900  		CMP	A,B	;SAME?
0183  e40191  		JNZ	GETKEYC0	;IF NOT, CONTINUE
0184  5c0300  		LDX	A,(IROM)	;GET KEYWORD BYTE
0185  9c0b80  		CPI	A,0B10000000	;END OF CURRENT KEYWORD?
0186  ec019b  		JNC	GETKEYE1	;FOUND THE KEYWORD, CONTINUE
0187  660000  		INX	IROM	;POINT NEXT TEXT BYTE IN DATA RAM
0188  620000  		INX	IRAM	;POINT NEXT KEYWORD BYTE IN DATA ROM
0189  5c0100  		LDX	A,(IRAM)	;GET TEXT BYTE
018a  9c0b41  		CPI	A,'A'	;ALPHABETIC?
018b  ec017e  		JNC	GETKEYL2	;IF SO, TRY AGAIN
018c  2a0000  GETKEYE0:	MOV	H,D	;RESTORE IRAM TO START OF TEXT
018d  258000  		MOV	L,E	
018e  600000  		LDHL	IRAM	
018f  9fa000  		AND	A,A	;NOT FOUND. RESET CARRY AND RETURN
0190  d00000  		RET			?
0191  5c0300  GETKEYC0:	LDX	A,(IROM)	;GET KEYWORD BYTE
0192  9c0b80  		CPI	A,0B10000000	;END OF KEYWORD?
0193  660000  		INX	IROM	;POINT NEXT BYTE IN KEYWORD TABLE
0194  e80191  		JC	GETKEYC0	;LOOP UNTIL END OF KEYWORD FOUND
0195  5c0300  		LDX	A,(IROM)	;GET KEYWORD BYTE
0196  9fa800  		OR	A,A	;END OF KEYWORD TABLE?
0197  620000  		INX	IRAM	;POINT NEXT TEXT BYTE IN DATA RAM
0198  e0018c  		JZ	GETKEYE0	;IF SO, NOT FOUND AND RETURN
0199  946000  		INR	C	;INCREMENT KEYWORD COUNTER
019a  f0017b  		JMP	GETKEYL1	;KEEP LOOKING IN KEYWORD TABLE
019b  620000  GETKEYE1:	INX	IRAM	;POINT NEXT TEXT BYTE IN DATA RAM
019c  807000  		STC		;SET CARRY	?
019d  d00000  		RET		;RETURN	?
019e  040053  GETLINK:	MVI	L,LO(LINKTBL)	;POINT HL TO START OF LINK TABLE
019f  080000  		MVI	H,HI(LINKTBL)	
01a0  96c000  		RLC	C	;DOUBLE C
01a1  868000  		ADD	L,C	;CALCULATE ADDRESS
01a2  881200  		ACI	H,0	
01a3  640000  		LDHL	IROM	;TRANSFER HL TO IROM
01a4  440300  		LDX	L,(IROM)	;GET ADDRESS
01a5  660000  		INX	IROM	
01a6  480300  		LDX	H,(IROM)	
01a7  d00000  		RET			?
01a8  5c0100  EXPR:	LDX	A,(IRAM)	;GET CHARACTER IN DATA RAM
01a9  9c0b2b  		CPI	A,'+'	;IS IT A PLUS SIGN
01aa  e401ad  		JNZ	EXPRC0	;IF NOT, CONTINUE
01ab  620000  		INX	IRAM	;IF SO, IGNORE IT
01ac  f001b4  		JMP	EXPRC1	
01ad  5c0100  EXPRC0:	LDX	A,(IRAM)	;GET NEXT CHARACTER IN DATA RAM
01ae  9c0b2d  		CPI	A,'-'	;IS IT A NEGATION?
01af  e401b4  		JNZ	EXPRC1	;IF NOT, CONTINUE
01b0  620000  		INX	IRAM	;POINT TO NEXT CHARACTER IN DATA RAM
01b1  c001c5  		CALL	TERM	;IF SO, EVALUATE A TERM
01b2  c00320  		CALL	NEG	;NEGATE THE RESULT
01b3  f001b5  		JMP	EXPRC2	;CONTINUE
01b4  c001c5  EXPRC1:	CALL	TERM	
01b5  5c0100  EXPRC2:	LDX	A,(IRAM)	;GET CHARACTER IN DATA RAM
01b6  9c0b2b  		CPI	A,'+'	;IS IT ADDITION?
01b7  e401bc  		JNZ	EXPRC3	;IF NOT, CONTINUE
01b8  620000  		INX	IRAM	;GET NEXT CHARACTER IN DATA RAM
01b9  c001c5  		CALL	TERM	
01ba  c00289  		CALL	ADD	
01bb  f001b5  		JMP	EXPRC2	;REPEAT
01bc  5c0100  EXPRC3:	LDX	A,(IRAM)	;GET CHARACTER IN DATA RAM
01bd  9c0b2d  		CPI	A,'-'	;IS IT SUBTRACTION?
01be  e401c4  		JNZ	EXPRC4	;IF NOT, CONTINUE
01bf  620000  		INX	IRAM	;GET NEXT CHARACTER IN DATA RAM
01c0  c001c5  		CALL	TERM	
01c1  c00320  		CALL	NEG	;NEGATE THE RESULT
01c2  c00289  		CALL	ADD	
01c3  f001b5  		JMP	EXPRC2	
01c4  d00000  EXPRC4:	RET			?
01c5  c001dc  TERM:	CALL	FACTOR	
01c6  5c0100  EXPRC5:	LDX	A,(IRAM)	;GET CHARACTER IN DATA RAM
01c7  9c0b2a  		CPI	A,'*'	;IS IT MULTIPLICATION?
01c8  e401cd  		JNZ	EXPRC6	;IF NOT, CONTINUE
01c9  620000  		INX	IRAM	;POINT TO NEXT CHARACTER IN DATA RAM
01ca  c001dc  		CALL	FACTOR	
01cb  c002a0  		CALL	MUL	
01cc  f001c6  		JMP	EXPRC5	;REPEAT
01cd  5c0100  EXPRC6:	LDX	A,(IRAM)	;GET CHARACTER IN DATA RAM
01ce  9c0b2f  		CPI	A,'/'	;IS IT DIVISION?
01cf  e401d4  		JNZ	EXPRC7	;IF NOT, CONTINUE
01d0  620000  		INX	IRAM	;POINT TO NEXT CHARACTER IN DATA RAM
01d1  c001dc  		CALL	FACTOR	
01d2  c002cd  		CALL	DIV	
01d3  f001c6  		JMP	EXPRC5	;REPEAT
01d4  5c0100  EXPRC7:	LDX	A,(IRAM)	;GET CHARACTER IN DATA RAM
01d5  9c0b25  		CPI	A,'%'	;IS IT MODULO?
01d6  e401db  		JNZ	EXPRC8	;IF NOT, CONTINUE
01d7  620000  		INX	IRAM	;POINT TO NEXT CHARACTER IN DATA RAM
01d8  c001dc  		CALL	FACTOR	
01d9  c00311  		CALL	MODULO	
01da  f001c6  		JMP	EXPRC5	;REPEAT
01db  d00000  EXPRC8:	RET		;DONE	?
01dc  c001f0  FACTOR:	CALL	GETFNCT	;IS IT A FUNCTION?
01dd  da0000  		RC		IF SO, PUT ON PP STACK AND RETURN	?
01de  c00259  		CALL	GETVAR	;IS IT A NUMBER?
01df  da0000  		RC		;IF SO, PUT ON PP STACK AND RETURN	?
01e0  c00263  		CALL	GETNUM	;IS IT A VARIABLE?
01e1  da0000  		RC		;IF SO, PUT ON PP STACK AND RETURN	?
01e2  5c0100  		LDX	A,(IRAM)	;GET CHARACTER IN DATA RAM
01e3  9c0b28  		CPI	A,'('	;OPEN PARENTHESES?
01e4  e40497  		JNZ	ERR9	;IF NOT, INVALID EXPRESSION
01e5  620000  		INX	IRAM	;POINT NEXT CHARACTER
01e6  c001a8  		CALL	EXPR	;CALL 
01e7  9c0b29  		CPI	A,')'	;CLOSED PARENTHESES
01e8  e40497  		JNZ	ERR9	;IF NOT, INVALID EXPRESSION
01e9  620000  		INX	IRAM	;POINT NEXT CHARACTER
01ea  d00000  		RET			?
01eb  5c0100  SKSPC:	LDX	A,(IRAM)	;GET THE CHARACTER
01ec  9c0b20  		CPI	A,' '	;IS IT A SPACE?
01ed  dc0000  		RNZ		;IF NOT, RETURN	?
01ee  620000  		INX	IRAM	;POINT NEXT CHARACTER IN DATA RAM
01ef  f001eb  		JMP	SKSPC	;REPEAT
01f0  c00177  GETFNCT:	CALL	GETKEY	;GET KEY NUMBER IN C
01f1  de0000  		RNC		;IF NOT A FUNCTION, RETURN W/ CARRY RESET	?
01f2  940b0e  		CPI	C,RANDOM	
01f3  e40233  		JNZ	GETFNCTE	
01f4  c00172  RNDM:	CALL	SKIPSPACE	;GET NEXT NONSPACE CHARACTER
01f5  9c0b28  		CPI	A,'('	;SHOULD BE AN OPEN PARENTHESES?
01f6  e40485  		JNZ	ERR0	;IF NOT, RAISE SYNTAX ERROR
01f7  620000  		INX	IRAM	;POINT NEXT CHARACTER
01f8  c001a8  		CALL	EXPR	;GET OPTION PARAMETER
01f9  c00172  		CALL	SKIPSPACE	;GET NEXT NONSPACE CHARACTER
01fa  9c0b29  		CPI	A,')'	;SHOULD BE A CLOSED PARENTHESES
01fb  e40485  		JNZ	ERR0	;IF NOT, RAISE SYNTAX ERROR
01fc  620000  		INX	IRAM	
01fd  a40200  		POP	L	
01fe  a80200  		POP	H	
01ff  840b00  		CPI	L,0	;IS IT 0 - NEW RANDOM NUMBER?
0200  e00206  		JZ	RNDML0	;IF SO, CONTINUE HERE
0201  840b01  		CPI	L,1	;IS IT 1 - RANDOMIZE FIRST
0202  e00235  		JZ	RNDMZ	;IF SO, CONTINUE HERE
0203  840b02  		CPI	L,2	IS IT 2 - RESTART THE RANDOM SEQUENCE FIRST
0204  e0023f  		JZ	RNDMRST	;IF SO, CONTINUE HERE
0205  f0049d  		JMP	ERR12	;INVALID FUNCTION PARAMETER ERROR
0206  0800ff  RNDML0:	MVI	H,0XFF	;START RANDOMIZING MANIPULATION
0207  040015  		MVI	L,SEED4	
0208  180008  		MVI	B,8	
0209  3c0000  RNDML1:	MOV	A,M	
020a  9fc000  		RLC	A	
020b  9c1200  		ACI	A,0	
020c  9fc000  		RLC	A	
020d  9c1200  		ACI	A,0	
020e  9fc000  		RLC	A	
020f  9c1200  		ACI	A,0	
0210  9c3000  		XOR	A,M	
0211  9fd000  		RAL	A	
0212  9fd000  		RAL	A	
0213  846800  		DCR	L	
0214  846800  		DCR	L	
0215  846800  		DCR	L	
0216  3c0000  		MOV	A,M	
0217  9fd000  		RAL	A	
0218  238000  		MOV	M,A	
0219  846000  		INR	L	
021a  3c0000  		MOV	A,M	
021b  9fd000  		RAL	A	
021c  238000  		MOV	M,A	
021d  846000  		INR	L	
021e  3c0000  		MOV	A,M	
021f  9fd000  		RAL	A	
0220  238000  		MOV	M,A	
0221  846000  		INR	L	
0222  3c0000  		MOV	A,M	
0223  9fd000  		RAL	A	
0224  238000  		MOV	M,A	
0225  986800  		DCR	B	
0226  e40209  		JNZ	RNDML1	
0227  480014  		LDR	H,SEED3	
0228  440015  		LDR	L,SEED4	
0229  882203  		ANI	H,0X03	;KEEP TO LESS THAN 1000
022a  880b03  		CPI	H,0X03	
022b  e00231  		JZ	RNDMC2	
022c  ec0206  RNDMC1:	JNC	RNDML0	
022d  a10300  		PUSH	H	
022e  a08300  		PUSH	L	
022f  807000  		STC		;SET CARRY AND RETURN	?
0230  d00000  		RET			?
0231  840be8  RNDMC2:	CPI	L,0XE8	
0232  f0022c  		JMP	RNDMC1	
0233  807000  GETFNCTE:	STC		;SET CARRY AND RETURN	?
0234  d00000  		RET			?
0235  bc0002  RNDMZ:	INP	A,2	;DO RANDOM ACCESS TO COUNTER PORT
0236  438212  		STR	SEED1,A	
0237  9c2207  		ANI	A,0X7	
0238  9c6800  RNDMZL:	DCR	A	;DO IT RANDOM MULTIPLE OF TIMES
0239  e40238  		JNZ	RNDMZL	
023a  bc0002  		INP	A,2	;ONE LAST TIME
023b  9fd000  		RAL	A	;MANIPULATE IT
023c  9c32aa  		XRI	A,0B10101010	
023d  438213  		STR	SEED2,A	
023e  f00206  		JMP	RNDML0	;GET THE RANDOMIZED NUMBER
023f  6c0012  RNDMRST:	LXI	IROM,SEED_DATA	;GET ORIGINAL SEEDS
0240  5c0300  		LDX	A,(IROM)	;STORE THEM
0241  438212  		STR	SEED1,A	
0242  660000  		INX	IROM	
0243  5c0300  		LDX	A,(IROM)	
0244  438213  		STR	SEED2,A	
0245  660000  		INX	IROM	
0246  5c0300  		LDX	A,(IROM)	
0247  438214  		STR	SEED3,A	
0248  660000  		INX	IROM	
0249  5c0300  		LDX	A,(IROM)	
024a  438215  		STR	SEED4,A	
024b  f00206  		JMP	RNDML0	;GET RANDOM NUMBER
024c  5c0100  GETVARADRS:	LDX	A,(IRAM)	;GET POSSIBLE VARIABLE NAME
024d  9c02c0  		ADI	A,0XC0	;A-Z OR A-Z
024e  de0000  		RNC		;RETURN IF NOT	?
024f  620000  		INX	IRAM	;POINT NEXT CHARACTER IN DATA RAM
0250  9c221f  		ANI	A,0B00011111	;MASK LOWER BITS
0251  9c6800  		DCR	A	;ADJUST TO ZERO BASE
0252  9fc000  		RLC	A	;MULTIPLY BY 2
0253  040048  		MVI	L,LO(VARSTRT)	;CALCULATE ADDRESS
0254  080000  		MVI	H,HI(VARSTRT)	
0255  878000  		ADD	L,A	
0256  881200  		ACI	H,0	
0257  807000  		STC		;SET CARRY	?
0258  d00000  		RET		;DONE AND RETURN	?
0259  c0024c  GETVAR:	CALL	GETVARADRS	
025a  de0000  		RNC		;RETURN IF NOT A VARIABLE	?
025b  3c0000  		MOV	A,M	;GET VARIABLE VALUE
025c  840201  		ADI	L,1	
025d  881200  		ACI	H,0	
025e  280000  		MOV	H,M	
025f  a10300  		PUSH	H	
0260  a38300  		PUSH	A	
0261  807000  		STC		;SET CARRY	?
0262  d00000  		RET			?
0263  5c0100  GETNUM:	LDX	A,(IRAM)	;GET FIRST CHARACTER
0264  9c0b2d  		CPI	A,'-'	;IS IT A NEAGTIVE NUMBER?
0265  e40270  		JNZ	GETNUMC0	;IF NOT, CONTINUE
0266  620000  		INX	IRAM	;POINT NEXT CHARACTER IN DATA RAM
0267  5c0100  		LDX	A,(IRAM)	GET NEXT CHARACTER
0268  c00277  		CALL	CHKNUM	;IS THIS A NUMERIC DIGIT?
0269  de0000  		RNC		;IF NOT RETURN WITH CARRY RESET	?
026a  c0037c  		CALL	ASC2BIN	;GET NUMBER IN HL
026b  c00327  		CALL	TWOCMP	;NEGATE THE RESULT
026c  a10300  		PUSH	H	;PUT RESULT ON STACK
026d  a08300  		PUSH	L	
026e  807000  		STC		;SET CARRY	?
026f  d00000  		RET			?
0270  c00277  GETNUMC0:	CALL	CHKNUM	;IS THIS A NUMERIC DIGIT?
0271  de0000  		RNC		;RETURN IF NOT	?
0272  c0037c  		CALL	ASC2BIN	
0273  a10300  		PUSH	H	;PUT RESULT ON STACK
0274  a08300  		PUSH	L	
0275  807000  		STC		;SET CARRY AND RETURN	?
0276  d00000  		RET			?
0277  9c0b3a  CHKNUM:	CPI	A,'9'+1	;DIGIT BIGGER THAN 9?
0278  de0000  		RNC		;IF SO, IT'S NOT A DIGIT AND RETURN WITH NO CARRY	?
0279  9c0b30  		CPI	A,'0'	;DIGIT SMALLER THAN 0?
027a  e8027d  		JC	CHKNUMC	;IF SO, CONTINUE
027b  807000  		STC		;SET CARRY AND RETURN	?
027c  d00000  		RET			?
027d  9fa800  CHKNUMC:	OR	A,A	;RESET CARRY AND RETURN
027e  d00000  		RET			?
027f  b40200  STORE:	POP	C	
0280  b80200  		POP	B	
0281  a40200  		POP	L	
0282  a80200  		POP	H	
0283  228000  		MOV	M,C	
0284  840201  		ADI	L,1	
0285  881200  		ACI	H,0	
0286  230000  		MOV	M,B	
0287  9fa000  		AND	A,A	
0288  d00000  		RET			?
0289  b40200  ADD:	POP	C	
028a  b80200  		POP	B	
028b  a40200  		POP	L	
028c  a80200  		POP	H	
028d  868000  		ADD	L,C	
028e  8b1000  		ADC	H,B	
028f  a10300  		PUSH	H	
0290  a08300  		PUSH	L	
0291  9fa800  		OR	A,A	;RESET CARRY AND RETURN
0292  d00000  		RET			?
0293  a40200  SUB:	POP	L	
0294  a80200  		POP	H	
0295  c00327  		CALL	TWOCMP	
0296  390000  		MOV	B,H	
0297  348000  		MOV	C,L	
0298  a40200  		POP	L	
0299  a80200  		POP	H	
029a  868000  		ADD	L,C	
029b  8b1000  		ADC	H,B	
029c  a10300  		PUSH	H	
029d  a08300  		PUSH	L	
029e  9fa800  		OR	A,A	;RESET CARRY AND RETURN
029f  d00000  		RET			?
02a0  180000  MUL:	MVI	B,0	
02a1  a40200  		POP	L	
02a2  a80200  		POP	H	
02a3  3d0000  		MOV	A,H	
02a4  9c0b80  		CPI	A,0B10000000	
02a5  e802a7  		JC	MULC0	
02a6  c002b7  		CALL	NINOX	
02a7  2c8000  MULC0:	MOV	E,L	
02a8  310000  		MOV	D,H	
02a9  a40200  		POP	L	
02aa  a80200  		POP	H	
02ab  3d0000  		MOV	A,H	
02ac  9c0b80  		CPI	A,0B10000000	
02ad  e802af  		JC	MULC1	
02ae  c002b7  		CALL	NINOX	
02af  c002b9  MULC1:	CALL	MULT	
02b0  986800  		DCR	B	
02b1  e402b3  		JNZ	MULC2	
02b2  c00327  		CALL	TWOCMP	
02b3  a10300  MULC2:	PUSH	H	
02b4  a08300  		PUSH	L	
02b5  9fa800  		OR	A,A	;RESET CARRY AND RETURN
02b6  d00000  		RET			?
02b7  986000  NINOX:	INR	B	
02b8  f00327  		JMP	TWOCMP	
02b9  a30300  MULT:	PUSH	B	
02ba  390000  		MOV	B,H	
02bb  348000  		MOV	C,L	
02bc  080000  		MVI	H,0	
02bd  040000  		MVI	L,0	
02be  1c0011  		MVI	A,17	
02bf  9b5800  MULTL:	RAR	B	
02c0  96d800  		RAR	C	
02c1  ec02c5  		JNC	MULTC	
02c2  858000  		ADD	L,E	
02c3  8a1000  		ADC	H,D	
02c4  807000  		STC		;SET CARRY	?
02c5  895800  MULTC:	RAR	H	
02c6  84d800  		RAR	L	
02c7  9c6800  		DCR	A	
02c8  e402bf  		JNZ	MULTL	
02c9  2b0000  		MOV	H,B	
02ca  268000  		MOV	L,C	
02cb  b80200  		POP	B	
02cc  d00000  		RET			?
02cd  180000  DIV:	MVI	B,0	
02ce  a40200  		POP	L	
02cf  a80200  		POP	H	
02d0  3d0000  		MOV	A,H	
02d1  9c0b80  		CPI	A,0B10000000	
02d2  e802d4  		JC	DIVC0	
02d3  c002b7  		CALL	NINOX	
02d4  2c8000  DIVC0:	MOV	E,L	
02d5  310000  		MOV	D,H	
02d6  a40200  		POP	L	
02d7  a80200  		POP	H	
02d8  3d0000  		MOV	A,H	
02d9  9c0b80  		CPI	A,0B10000000	
02da  e802dc  		JC	DIVC1	
02db  c002b7  		CALL	NINOX	
02dc  c0032c  DIVC1:	CALL	XHLDE	
02dd  880b00  		CPI	H,0	
02de  e402e1  		JNZ	DIVC	
02df  840b00  		CPI	L,0	
02e0  e00495  		JZ	ERR8	
02e1  c002e9  DIVC:	CALL	DIVD	
02e2  986800  		DCR	B	
02e3  e402e5  		JNZ	DIVC2	
02e4  c00327  		CALL	TWOCMP	
02e5  a10300  DIVC2:	PUSH	H	
02e6  a08300  		PUSH	L	
02e7  9fa800  		OR	A,A	;RESET CARRY AND RETURN
02e8  d00000  		RET			?
02e9  a30300  DIVD:	PUSH	B	
02ea  180001  		MVI	B,1	
02eb  3d0000  DIVDL1:	MOV	A,H	
02ec  9c2240  		ANI	A,0X40	
02ed  e402f2  		JNZ	DIVDC0	
02ee  848000  		ADD	L,L	
02ef  891000  		ADC	H,H	
02f0  986000  		INR	B	
02f1  f002eb  		JMP	DIVDL1	
02f2  430208  DIVDC0:	STR	COUNT,B	
02f3  390000  		MOV	B,H	
02f4  348000  		MOV	C,L	
02f5  080000  		MVI	H,0	
02f6  040000  		MVI	L,0	
02f7  8e8800  DIVDL2:	SUB	E,C	
02f8  931800  		SBB	D,B	
02f9  ec0309  		JNC	DIVDC2	
02fa  8e8000  		ADD	E,C	
02fb  931000  		ADC	D,B	
02fc  848000  		ADD	L,L	
02fd  891000  		ADC	H,H	
02fe  5c0008  		LDR	A,COUNT	
02ff  9c6800  		DCR	A	
0300  e00307  		JZ	DIVDE	
0301  438208  DIVDC1:	STR	COUNT,A	
0302  c0032c  		CALL	XHLDE	
0303  848000  		ADD	L,L	
0304  891000  		ADC	H,H	
0305  c0032c  		CALL	XHLDE	
0306  f002f7  		JMP	DIVDL2	
0307  b80200  DIVDE:	POP	B	
0308  d00000  		RET			?
0309  848000  DIVDC2:	ADD	L,L	
030a  891000  		ADC	H,H	
030b  840201  		ADI	L,1	
030c  881200  		ACI	H,0	
030d  5c0008  		LDR	A,COUNT	
030e  9c6800  		DCR	A	
030f  e00307  		JZ	DIVDE	
0310  f00301  		JMP	DIVDC1	
0311  a40200  MODULO:	POP	L	;GET DIVIDEND OFF PP STACK
0312  a80200  		POP	H	
0313  ac0200  		POP	E	;GET DIVISOR OF PP STACK
0314  b00200  		POP	D	
0315  a20300  		PUSH	D	;PUSH DIVIDEND ON PP STACK TWICE
0316  a18300  		PUSH	E	
0317  a10300  		PUSH	H	
0318  a08300  		PUSH	L	
0319  a20300  		PUSH	D	;PUSH DIVISOR ON PP STACK
031a  a18300  		PUSH	E	
031b  a10300  		PUSH	H	
031c  a08300  		PUSH	L	
031d  c002cd  		CALL	DIV	;PERFORM INTEGER DIVISION
031e  c002a0  		CALL	MUL	;MULTIPLY THE TWO VALUES
031f  f00293  		JMP	SUB	;SUBTRACT THE TWO VALUES
0320  a40200  NEG:	POP	L	
0321  a80200  		POP	H	
0322  c00327  		CALL	TWOCMP	
0323  a10300  		PUSH	H	
0324  a08300  		PUSH	L	
0325  9fa800  		OR	A,A	;RESET CARRY AND RETURN
0326  d00000  		RET			?
0327  8832ff  TWOCMP:	XRI	H,0XFF	
0328  8432ff  		XRI	L,0XFF	
0329  840201  		ADI	L,1	
032a  881200  		ACI	H,0	
032b  d00000  		RET			?
032c  3e0000  XHLDE:	MOV	A,D	
032d  310000  		MOV	D,H	
032e  2b8000  		MOV	H,A	
032f  3d8000  		MOV	A,E	
0330  2c8000  		MOV	E,L	
0331  278000  		MOV	L,A	
0332  d00000  		RET			?
0333  6c0000  CINIT:	LXI	IROM,INIT_DATA	;COPY INITIALIZATION DATA TO RAM
0334  68ff00  		LXI	IRAM,CURLBL+0XFF00	
0335  5c0300  CINITL:	LDX	A,(IROM)	
0336  438600  		STX	IRAM,A	
0337  660000  		INX	IROM	
0338  620000  		INX	IRAM	
0339  6d0018  		CPI	IROM,KEYTBL	
033a  e40335  		JNZ	CINITL	
033b  680048  ZEROVAR:	LXI	IRAM,VARSTRT	;ZERO A-Z VARIABLES
033c  180000  		MVI	B,0	
033d  1c0034  		MVI	A, 26*2	
033e  430600  CINITCL:	STX	IRAM,B	
033f  620000  		INX	IRAM	
0340  9c6800  		DCR	A	
0341  e4033e  		JNZ	CINITCL	
0342  d00000  		RET			?
0343  d00000  WINIT:	RET			?
0344  1c003e  GETLINE:	MVI	A,'>'	;DISPLAY PROMPT
0345  c0046e  		CALL	CHROUT	
0346  680000  BUFIN:	LXI	IRAM, BUFSTRT	;COPY INPUTTED CHARACTERS TO INPUT BUFFER
0347  180048  		MVI	B, 72	;SET MAXIMUM LINE LENGTH
0348  c00465  BUFINL:	CALL	CHRIN	
0349  9c0b0a  		CPI	A,EOL	;AT END OF INPUT LINE?
034a  e00352  		JZ	BUFEND	;IF SO, GO PROCESS
034b  9c0b08  		CPI	A,BS	;A BACKSPACE?
034c  e00359  		JZ	RUBOUT	;IF SO, DO A RUBOUT
034d  438600  		STX	IRAM,A	;OTHERWISE, STRORE IT IN DATA RAM
034e  620000  		INX	IRAM	;POINT NEXT POSITION IN DATA RAM
034f  986800  		DCR	B	;REDUCE CHACTER COUNT BY 1
0350  e00487  		JZ	ERR1	;IF LINE LENGTH EXCEEDED, GENERATE ERROR
0351  f00348  		JMP	BUFINL	;GET NEXT CHARACTER
0352  1c000d  BUFEND:	MVI	A,CR	;STORE LAST CHARACTER AND RETURN
0353  438600  		STX	IRAM,A	
0354  1c0000  		MVI	A,0	
0355  43820a  		STR	ZONE,A	
0356  980b48  		CPI	B,72	
0357  e00344  		JZ	GETLINE	
0358  d00000  		RET			?
0359  980b48  RUBOUT:	CPI	B,72	;AT BEGINNING OF LINE?
035a  e00348  		JZ	BUFINL	;IF SO, DO NOTHING
035b  630000  		DCX	IRAM	;OTHERWISE, BACK UP ON POSITION
035c  986000  		INR	B	
035d  f00348  		JMP	BUFINL	
035e  680000  TSTL:	LXI	IRAM,BUFSTRT	;PREPARE TO SCAN LINE BUFFER
035f  5c0100  SKIPSPC:	LDX	A,(IRAM)	;SKIP ANY SPACES
0360  9c0b20  		CPI	A,' '	
0361  620000  		INX	IRAM	
0362  e0035f  		JZ	SKIPSPC	
0363  630000  		DCX	IRAM	
0364  240200  		MOV	L,IRAML	;ASSUME A COMMAND
0365  280280  		MOV	H,IRAMH	
0366  408206  		STR	TXTSTRT,L	
0367  410207  		STR	TXTSTRT+1,H	
0368  040000  		MVI	L,0	
0369  080000  		MVI	H,0	
036a  408200  		STR	CURLBL,L	
036b  410201  		STR	CURLBL+1,H	
036c  9c0b3a  		CPI	A,':'	;IS IT A COMMAND (NON-NUMERIC CHARACTER)?
036d  de0000  		RNC		;IF SO, RETURN WITH NO CARRY AND CURLBL=0	?
036e  9c0b30  		CPI	A,'0'	;IS WHAT IS LEFT IS NON-NUMERIC?
036f  ec0373  		JNC	LBL	
0370  9fa800  		OR	A,A	;RESET CARRY AND RETURN
0371  d00000  		RET			?
0372  e80485  		JC	ERR0	;IF SO, THEN IT'S A SYNTAX ERROR
0373  c0037c  LBL:	CALL	ASC2BIN	;IF NUMERIC, CAPTURE AND STORE IN CURLBL
0374  408200  		STR	CURLBL,L	
0375  410201  		STR	CURLBL+1,H	
0376  2c0200  		MOV	E,IRAML	
0377  300280  		MOV	D,IRAMH	
0378  418206  		STR	TXTSTRT,E	
0379  420207  		STR	TXTSTRT+1,D	
037a  807000  		STC		;SET CARRY AND RETURN	?
037b  d00000  		RET			?
037c  080000  ASC2BIN:	MVI	H,0	
037d  040000  		MVI	L,0	
037e  5c0100  ASC2BINL:	LDX	A,(IRAM)	;GET PROGRAM BYTE
037f  c00277  		CALL	CHKNUM	;GET VALUE
0380  de0000  		RNC		;DONE WHEN NON-ASCII DIGIT ENCOUNTERED	?
0381  9c220f  		ANI	A,0B00001111	;STRIP BACK TO NUMERIC VALUE
0382  9c0b0a  		CPI	A,10	;IS VALUE GREATER THAN 10?
0383  de0000  		RNC		;IF SO, DONE AND RETURN	?
0384  620000  		INX	IRAM	;POINT TO NEXT CHARACTER
0385  390000  		MOV	B,H	;MULTIPLY HL BY 10
0386  348000  		MOV	C,L	
0387  848000  		ADD	L,L	;2*HL
0388  891000  		ADC	H,H	
0389  e80489  		JC	ERR2	;OVERFLOW ERROR
038a  848000  		ADD	L,L	;4*HL
038b  891000  		ADC	H,H	
038c  e80489  		JC	ERR2	;OVERFLOW ERROR
038d  868000  		ADD	L,C	;5*HL
038e  8b1000  		ADC	H,B	
038f  e80489  		JC	ERR2	;OVERFLOW ERROR
0390  848000  		ADD	L,L	;10*HL
0391  891000  		ADC	H,H	
0392  e80489  		JC	ERR2	;OVERFLOW ERROR
0393  878000  		ADD	L,A	;10*HL+NEW DIGIT VALUE
0394  881200  		ACI	H,0	
0395  e80489  		JC	ERR2	;OVERFLOW ERROR
0396  f0037e  		JMP	ASC2BINL	
0397  5c0100  ASCIN:	LDX	A,(IRAM)	;GET THE ASCII CHARACTER
0398  9c0b30  		CPI	A,'0'	;AN ASCII NUMBER?
0399  da0000  		RC		;IF NOT, RETURN WITH CARRY SET	?
039a  9c0b3a  		CPI	A,':'	;AN ASCII NUMBER?
039b  ec039e  		JNC	ASCINC	;IF NOT, CONTINUE
039c  9c220f  		ANI	A,0B00001111	IF NUMERIC, RESET CARRY/STRIP ASCII UPPER BITS
039d  d00000  		RET		;RETURN	?
039e  807000  ASCINC:	STC		;SET CARRY AND RETURN	?
039f  d00000  		RET			?
03a0  a20300  INSRT:	PUSH	D	;SAVE DE
03a1  a18300  		PUSH	E	
03a2  440006  		LDR	L,TXTSTRT	;GET TEXT START ADDRESS IN IRAM
03a3  480007  		LDR	H,TXTSTRT+1	
03a4  600000  		LDHL	IRAM	;POINT IRAM TO TEXT
03a5  440000  		LDR	L,CURLBL	
03a6  480001  		LDR	H,CURLBL+1	
03a7  9ca800  		OR	A,L	
03a8  e0048b  		JZ	ERR3	;IF A COMMAND, ERROR
03a9  390000  		MOV	B,H	;SAVE LABEL OF NEW LINE
03aa  348000  		MOV	C,L	
03ab  100001  INSRTF1:	MVI	D,1	;COUNT CHARATERS IN NEW LINE
03ac  5c0100  INSRTL2:	LDX	A,(IRAM)	
03ad  9c0b0d  		CPI	A,CR	
03ae  e003b2  		JZ	INSRTC1	
03af  906000  		INR	D	
03b0  620000  		INX	IRAM	
03b1  f003ac  		JMP	INSRTL2	
03b2  420208  INSRTC1:	STR	COUNT,D	;STORE COUNT OF NEW LINE
03b3  440006  		LDR	L,TXTSTRT	;POINT HL TO PROGRAM START
03b4  480007  		LDR	H,TXTSTRT+1	
03b5  600000  		LDHL	IRAM	;POINT IRAM TO START OF TEXT
03b6  440002  		LDR	L,PRGSTRT	;POINT HL TO PROGRAM START
03b7  480003  		LDR	H,PRGSTRT+1	
03b8  c00456  INSRTL4:	CALL	CKPEND	;PROGRAM END SAME AS PROGRAM BEGIN?
03b9  e0043e  		JZ	APPEND	;IF SO, THEN APPEND NEW LINE
03ba  830900  		CMP	M,B	;COMPARE MSB OLD LINE AND NEW LINE LABELS
03bb  e003c4  		JZ	INSRTC2	;IF THE SAME, GO CHECK LSBS
03bc  ec03cb  		JNC	HERE	;IF NEW LINE LABEL GREATER, INSERT NEW LINE HERE
03bd  840201  		ADI	L,1	;OTHERWISE, POINT TO NEXT OLD LINE (INX HL)
03be  881200  		ACI	H,0	
03bf  840201  INSRTL3:	ADI	L,1	; (INX HL)
03c0  881200  		ACI	H,0	
03c1  840000  		ADD	L,M	;ADD COUNT TO POINT NEXT OLD LINE
03c2  881200  		ACI	H,0	
03c3  f003b8  		JMP	INSRTL4	;THEN TRY AGAIN
03c4  840201  INSRTC2:	ADI	L,1	;POINT TO LSB OF OLD LINE LABEL
03c5  881200  		ACI	H,0	
03c6  828900  		CMP	M,C	;COMPARE LSB OF OLD LINE TO NEW LINE
03c7  e00408  		JZ	OVRDEL	;LABELS ARE SAME, DELETE OLD THEN INSERT NEW
03c8  e803bf  		JC	INSRTL3	;IF NEW LINE LABEL LESS, KEEP LOOKING
03c9  840a01  		SUI	L,1	;POINT BACK TO START OF OLD LINE
03ca  881a00  		SBI	H,0	
03cb  840a01  HERE:	SUI	L,1	
03cc  881a00  		SBI	H,0	
03cd  2c0200  		MOV	E,IRAML	;SAVE START OF NEW LINE TEXT
03ce  300280  		MOV	D,IRAMH	
03cf  a20300  CINP:	PUSH	D	
03d0  a18300  		PUSH	E	
03d1  310000  		MOV	D,H	
03d2  2c8000  		MOV	E,L	
03d3  440004  		LDR	L,PRGEND	;POINT IRAM TO NEW INSERTION POINT
03d4  480005  		LDR	H,PRGEND+1	
03d5  a10300  		PUSH	H	
03d6  a08300  		PUSH	L	
03d7  5c0008  		LDR	A,COUNT	;COMPUTE NEW PROGRAM END
03d8  9c0203  		ADI	A,3	
03d9  878000  		ADD	L,A	
03da  881200  		ACI	H,0	
03db  c0045c  		CALL	MEMTEST	;CHECK FOR OUT OF MEMORY ERROR
03dc  e8049f  		JC	ERR15	;IF SO, RAISE OUT OF MEMORY ERROR
03dd  600000  		LDHL	IRAM	
03de  408204  		STR	PRGEND,L	;UPDATE PROGRAM END
03df  410205  		STR	PRGEND+1,H	
03e0  a40200  		POP	L	
03e1  a80200  		POP	H	
03e2  3c0000  INSRTL5:	MOV	A,M	
03e3  438600  		STX	IRAM,A	
03e4  630000  		DCX	IRAM	
03e5  840a01  		SUI	L,1	
03e6  881a00  		SBI	H,0	
03e7  3c0280  		MOV	A,IRAMH	
03e8  9e0900  		CMP	A,D	
03e9  e403e2  		JNZ	INSRTL5	
03ea  3c0200  		MOV	A,IRAML	
03eb  9d8900  		CMP	A,E	
03ec  e403e2  		JNZ	INSRTL5	
03ed  8c0201  		ADI	E,1	
03ee  901200  		ACI	D,0	
03ef  2a0000  		MOV	H,D	
03f0  258000  		MOV	L,E	
03f1  600000  		LDHL	IRAM	
03f2  4c0000  		LDR	E,CURLBL	
03f3  500001  		LDR	D,CURLBL+1	
03f4  420600  		STX	IRAM,D	
03f5  620000  		INX	IRAM	
03f6  418600  		STX	IRAM,E	
03f7  620000  		INX	IRAM	
03f8  5c0008  		LDR	A,COUNT	
03f9  9c6000  		INR	A	
03fa  438600  		STX	IRAM,A	
03fb  620000  		INX	IRAM	
03fc  a40200  		POP	L	
03fd  a80200  		POP	H	
03fe  3c0000  INSRTL6:	MOV	A,M	
03ff  438600  		STX	IRAM,A	
0400  9c0b0d  		CPI	A,CR	
0401  e00406  		JZ	INSRTE	
0402  620000  		INX	IRAM	
0403  840201  		ADI	L,1	
0404  880200  		ADI	H,0	
0405  f003fe  		JMP	INSRTL6	
0406  b00200  INSRTE:	POP	D	
0407  d00000  		RET			?
0408  840a01  OVRDEL:	SUI	L,1	;
0409  881a00  		SBI	H,0	
040a  a10300  		PUSH	H	
040b  a08300  		PUSH	L	
040c  840203  		ADI	L,3	
040d  881200  		ACI	H,0	
040e  800b0d  INSRTL7:	CPI	M,CR	
040f  e00413  		JZ	INSRTC3	
0410  840201  		ADI	L,1	
0411  881200  		ACI	H,0	
0412  f0040e  		JMP	INSRTL7	
0413  840201  INSRTC3:	ADI	L,1	
0414  881200  		ACI	H,0	
0415  310000  		MOV	D,H	
0416  2c8000  		MOV	E,L	
0417  440004  		LDR	L,PRGEND	
0418  480005  		LDR	H,PRGEND+1	
0419  8a0900  		CMP	H,D	;AT LAST LINE?
041a  e40420  		JNZ	INSRTC4	;IF NOT, CONTINUE
041b  858900  		CMP	L,E	
041c  e40420  		JNZ	INSRTC4	;IF NOT, CONTINUE
041d  a40200  		POP	L	;GET NEW PROGRAM END INTO HL
041e  a80200  		POP	H	
041f  f00436  		JMP	INSRTC5	;IF SO, DONE
0420  840201  INSRTC4:	ADI	L,1	
0421  881200  		ACI	H,0	
0422  390000  		MOV	B,H	
0423  348000  		MOV	C,L	
0424  2a0000  		MOV	H,D	
0425  258000  		MOV	L,E	
0426  600000  		LDHL	IRAM	
0427  a40200  		POP	L	
0428  a80200  		POP	H	
0429  5c0100  INSRTL8:	LDX	A,(IRAM)	
042a  238000  		MOV	M,A	
042b  840201  		ADI	L,1	
042c  881200  		ACI	H,0	
042d  620000  		INX	IRAM	
042e  300280  		MOV	D,IRAMH	
042f  930900  		CMP	D,B	
0430  e40429  		JNZ	INSRTL8	
0431  2c0200  		MOV	E,IRAML	
0432  8e8900  		CMP	E,C	
0433  e40429  		JNZ	INSRTL8	
0434  840a01  		SUI	L,1	
0435  881a00  		SBI	H,0	
0436  408204  INSRTC5:	STR	PRGEND,L	
0437  410205  		STR	PRGEND+1,H	
0438  5c0008  		LDR	A,COUNT	
0439  9c0b01  		CPI	A,1	
043a  e403a2  		JNZ	INSRT+2	
043b  ac0200  		POP	E	
043c  b00200  		POP	D	
043d  d00000  		RET			?
043e  230000  APPEND:	MOV	M,B	;PUT MSB OF CURLBL IN NEW PROGRAM LINE
043f  840201  		ADI	L,1	
0440  881200  		ACI	H,0	
0441  228000  		MOV	M,C	;PUT LSB OF CURLBL IN NEW PROGRAM LINE 
0442  840201  		ADI	L,1	
0443  881200  		ACI	H,0	
0444  5c0008  		LDR	A,COUNT	;PUT LINE COUNT+1 IN NEW PROGRAM LINE
0445  9c6000  		INR	A	
0446  238000  		MOV	M,A	
0447  630000  		DCX	IRAM	;POINT NEW LINE BACK ONE BYTE
0448  840201  APPENDL:	ADI	L,1	;POINT NEXT OLD LINE BYTE
0449  881200  		ACI	H,0	
044a  620000  		INX	IRAM	;POINT NEXT NEW LINE
044b  5c0100  		LDX	A,(IRAM)	;GET NEW BYTE
044c  238000  		MOV	M,A	;PUT IN NEW LINE
044d  9c0b0d  		CPI	A,13	;CARRIAGE RETURN?
044e  e40448  		JNZ	APPENDL	;IF NOT, KEEP ADDING NEW BYTES
044f  840201  		ADI	L,1	;IF SO, POINT NEXT NEW LINE BYTE 
0450  881200  		ACI	H,0	
0451  408204  		STR	PRGEND,L	;UPDATE PROGRAM END
0452  410205  		STR	PRGEND+1,H	
0453  ac0200  		POP	E	;RESTORE DE
0454  b00200  		POP	D	
0455  d00000  		RET			?
0456  5c0005  CKPEND:	LDR	A,PRGEND+1	;NEW LINE INSERTED; DONE
0457  9d0900  		CMP	A,H	
0458  dc0000  		RNZ		;DELETE CURRENT PROGRAM LINE	?
0459  5c0004  		LDR	A,PRGEND	
045a  9c8900  		CMP	A,L	;CR?
045b  d00000  		RET			?
045c  5c0017  MEMTEST:	LDR	A,MEND+1	;PROGRAM END EXCEEDS MEMORY END?
045d  9d0900  		CMP	A,H	;CHECK MSB OF MEMORY END
045e  e00460  		JZ	MEMTSTC	;SAME, CHECK LSB
045f  da0000  		RC		;IF SO, RETURN WITH CARRY SET	?
0460  5c0016  MEMTSTC:	LDR	A,MEND	;CHECK LSB OF MEMORY END
0461  9c8900  		CMP	A,L	;PAST MEMORY END?
0462  de0000  		RNC		;IF NOT, RETURN WITH CARRY RESET	?
0463  807000  		STC		;SET	?
0464  d00000  		RET		;RETURN WITH CARRY SET	?
0465  bc0000  CHRIN:	INP	A,CNTR_PORT	;GET KEYBOARD/DISPLAY CONTROL BYTE
0466  9c2240  		ANI	A,KBY_MASK	;CHARACTER AVAILABLE?
0467  e00465  		JZ	CHRIN	;IF NOT, KEEP CHECKING
0468  bc0001  		INP	A,DATA_PORT	;INPUT ASCII CHARACTER
0469  9c0b5c  		CPI	A,ESCAPE	;ESCAPE CODE?
046a  e00005  		JZ	WSTART	;IF SO, DO A WARM START
046b  9c0b0d  		CPI	A,CR	;CARRIAGE RETURN CHARACTER?
046c  e4046e  		JNZ	CHROUT	;IF NOT, DONE AND RETURN
046d  d00000  		RET		;DONE AND RETURN W/O DISPLAYING CR	?
046e  a38300  CHROUT:	PUSH	A	;SAVE CHARACTER TO PRINT
046f  5c000a  		LDR	A,ZONE	;INCREMENT ZONE COUNTER
0470  9c6000  		INR	A	
0471  43820a  		STR	ZONE,A	
0472  bc0000  WAIT:	INP	A,CNTR_PORT	;GET KEYBOARD/DISPLAY CONTROL BYTE
0473  9c2280  		ANI	A,DSP_MASK	;DISPLAY BUSY
0474  e40472  		JNZ	WAIT	;IF SO, KEEP CHECKING
0475  bc0200  		POP	A	;RESTORE CHARACTER TO PRINT
0476  a38101  		OUT	DATA_PORT,A	;OUTPUT ASCII CHARACTER
0477  d00000  		RET		;DONE AND RETURN	?
0478  1c0000  NEWLINE:	MVI	A,0	
0479  43820a  		STR	ZONE,A	
047a  1c000a  		MVI	A,EOL	
047b  f0046e  		JMP	CHROUT	
047c  1c000c  CLRSCR:	MVI	A,CNTR_L	
047d  f0046e  		JMP	CHROUT	
047e  5c0300  MSGOUT:	LDX	A,(IROM)	
047f  9fa800  		OR	A,A	
0480  d80000  		RZ			?
0481  c0046e  		CALL	CHROUT	
0482  660000  		INX	IROM	
0483  f0047e  		JMP	MSGOUT	
0484  f00484  WARM_BOOT:	JMP	WARM_BOOT	
0485  040000  ERR0:	MVI	L,0	;SYNTAX ERROR
0486  f004a1  		JMP	ERROR	
0487  040001  ERR1:	MVI	L,1	;LINE OVERFLOW
0488  f004a1  		JMP	ERROR	
0489  040002  ERR2:	MVI	L,2	;NUMERIC OVERFLOW
048a  f004a1  		JMP	ERROR	
048b  040003  ERR3:	MVI	L,3	;BADLY FORMED COMMAND
048c  f004a1  		JMP	ERROR	
048d  040004  ERR4:	MVI	L,4	;EXPECTED END OF LINE
048e  f004a1  		JMP	ERROR	
048f  040005  ERR5:	MVI	L,5	;EXPECTED CLOSED QUOTE
0490  f004a1  		JMP	ERROR	
0491  040006  ERR6:	MVI	L,6	;UNKNOWN LINE NUMBER
0492  f004a1  		JMP	ERROR	
0493  040007  ERR7:	MVI	L,7	;EXPECTED VARIABLE NAME
0494  f004a1  		JMP	ERROR	
0495  040008  ERR8:	MVI	L,8	;DIVIDE BY ZERO
0496  f004a1  		JMP	ERROR	
0497  040009  ERR9:	MVI	L,9	;INVALID EXPRESSION+D612
0498  f004a1  		JMP	ERROR	
0499  04000a  ERR10:	MVI	L,10	;EXPECTED VARIABLE
049a  f004a1  		JMP	ERROR	
049b  04000b  ERR11:	MVI	L,11	;NO PROGRAM TO LOAD
049c  f004a1  		JMP	ERROR	
049d  04000c  ERR12:	MVI	L,12	;INVALID FUNCTION PARAMETER
049e  f004a1  		JMP	ERROR	
049f  04000f  ERR15:	MVI	L,15	;OUT OF MEMORY
04a0  f004a1  		JMP	ERROR	
04a1  c00478  ERROR:	CALL	NEWLINE	;NEXT LINE
04a2  6c009c  		LXI	IROM,MSG_ERR0	
04a3  c0047e  		CALL	MSGOUT	
04a4  080000  		MVI	H,0	
04a5  140000  		MVI	C,0	
04a6  c00150  		CALL	NUMOUT	
04a7  6c00a3  		LXI	IROM,MSG_ERR1	
04a8  c0047e  		CALL	MSGOUT	
04a9  440000  		LDR	L,CURLBL	
04aa  480001  		LDR	H,CURLBL+1	
04ab  1400ff  		MVI	C,0XFF	
04ac  c00150  		CALL	NUMOUT	
04ad  f00005  		JMP	WSTART	
