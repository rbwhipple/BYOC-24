0000  c005b4  START:	CALL	CLRSCR	;CLEAR SCREEN
0001  6c0094  		LXI	IROM,MSG_WEL	;PRINT WELCOME MESSAGE
0002  c005ba  		CALL	MSGOUT	
0003  c00434  		CALL	CINIT	;INITIALIZE FOR COLD START
0004  c005b0  		CALL	 NEWLINE	;SKIP A LINE
0005  c00444  WSTART:	CALL	WINIT	;INITIALIZE FOR WARM START
0006  1c0003  		MVI	A,0B00000011	;RESET PUSH/POP & CALL/RETURN STACKS
0007  a381ff  		OUT	0XFF,A	
0008  c005b0  		CALL	NEWLINE	;NEW LINE
0009  c00445  		CALL	GETLINE	;GET COMMAND OR STATEMENT
000a  c00463  		CALL	TRNS	;TRANSLATE KEYWORDS
000b  c005b0  		CALL	NEWLINE	;NEW LINE
000c  c004a2  		CALL	TSTL	;COMMAND OR STATEMENT (TO INSERT)?
000d  ec0010  		JNC	CMDPR	;IF A COMMAND, GO EXECUTE IT
000e  c004db  		CALL	INSRT	;IF A STATEMENT, INSERT IT (OR DELETE/REPLACE)
000f  f00005  		JMP	WSTART	;REPEAT
0010  440006  CMDPR:	LDR	L,TXTSTRT	;POINT IRAM TO START OF TEXT IN INPUT BUFFER
0011  480007  		LDR	H,TXTSTRT+1	
0012  600000  		LDHL	IRAM	
0013  540100  		LDX	C,(IRAM)	;TBXC
0014  940a80  		SUI	C,0B10000000	
0015  e80044  		JC	LET	
0016  620000  		INX	IRAM	;POINT FIRST TEXT BYTE
0017  c00271  		CALL	GETLINK	;IF FOUND, GET KEYWORD ADDRESS IN HL
0018  f20000  		PCHL		;GO PROCESS IT	?
0019  5c0100  STMPR:	LDX	A,(IRAM)	;UPDATE CURLBL FROM PROGRAM LINE NUMBER
001a  438201  		STR	CURLBL+1,A	
001b  620000  		INX	IRAM	
001c  5c0100  		LDX	A,(IRAM)	
001d  438200  		STR	CURLBL,A	
001e  620000  		INX	IRAM	;SKIP LINE LENGTH
001f  3c0200  		MOV	A,IRAML	;STORE (START OF LINE PROGRAM TEXT - 1) TBX START
0020  438211  		STR	LTXTSTRT,A	
0021  3c0280  		MOV	A,IRAMH	
0022  438212  		STR	LTXTSTRT+1,A	
0023  620000  STMPRNS:	INX	IRAM	;POINT NEXT PROGRAM BYTE TBX END
0024  3c0200  STMPRC:	MOV	A,IRAML	;STORE START OF PROGRAM TEXT
0025  438206  		STR	TXTSTRT,A	
0026  3c0280  		MOV	A,IRAMH	
0027  438207  		STR	TXTSTRT+1,A	
0028  c00242  		CALL	SKIPSPACE	;GET NEXT NONSPACE CHARACTER
0029  540100  		LDX	C,(IRAM)	;TBXC
002a  940a80  		SUI	C,0B10000000	
002b  e80044  		JC	LET	
002c  620000  		INX	IRAM	;POINT FIRST TEXT BYTE
002d  c00271  STMPRC0:	CALL	GETLINK	;IF SO, GET KEYWORD ADDRESS IN HL
002e  f20000  		PCHL		;PROCESS STATEMENT AT HL	?
002f  bc0000  DONE:	INP	A,CNTR_PORT	;GET KEYBOARD CHARACTER INTO A
0030  9c2240  		ANI	A,KBY_MASK	;CHARACTER AVAILABLE?
0031  e00035  		JZ	DONEC0	;IF NOT, CONTINUE
0032  bc0001  		INP	A,DATA_PORT	;GET THE ASCII CHARACTER
0033  9c0b1b  		CPI	A,ESCAPE	;ESCAPE CODE?
0034  e00005  		JZ	WSTART	;IF SO, DO A WARM START
0035  c00242  DONEC0:	CALL	SKIPSPACE	;SKIP ANY SPACES
0036  9c0b3a  		CPI	A,':'	;END OF MULTI-STATEMENT (:)?
0037  e00023  		JZ	STMPRNS	;IF SO, GO ON TO NEXT STATEMENT
0038  9c0b0d  		CPI	A,CR	;END OF LINE (CR)?
0039  e405c9  		JNZ	ERR4	;IF NOT, RAISE EXPECTED END OF LINE ERROR
003a  620000  DONEC0A:	INX	IRAM	
003b  440000  		LDR	L,CURLBL	;GET CURRENT LABEL
003c  480001  		LDR	H,CURLBL+1	
003d  88a800  		OR	H,L	;A COMMAND (0 LABEL)
003e  e00005  		JZ	WSTART	;IF SO, GET A NEW LINE
003f  440004  DONEC1:	LDR	L,PRGEND	;CHECK FOR END OF PROGARM?
0040  480005  		LDR	H,PRGEND+1	
0041  790000  		CPHL	IRAM	
0042  e40019  		JNZ	STMPR	;IF NOT PROGRAM END, CONTINUE TO NEXT PROGRAM LINE
0043  f00005  		JMP	WSTART	;OTHERWISE, END EXECUTION
0044  c00242  LET:	CALL	SKIPSPACE	:GET NEXT NONSPACE CHARACTER -  A VARIABLE?
0045  c00334  		CALL	GETVARADRS	;GET THE VARIABLE'S ADDRESS
0046  ec05d5  		JNC	ERR10	;IF NOT A VARIABLE, RAISE EXPECTED VARIABLE ERROR
0047  a10300  		PUSH	H	;SAVE ADDRESS ON PP STACK
0048  a08300  		PUSH	L	
0049  c00242  		CALL	SKIPSPACE	;GET NEXT NONSPACE CHARACTER
004a  9c0b3d  		CPI	A,'='	;EQUAL SIGN?
004b  e405c1  		JNZ	ERR0	;IF NOT, RAISE SYNTAX ERROR
004c  620000  		INX	IRAM	;POINT NEXT CHARACTER
004d  c00242  		CALL	SKIPSPACE	;GET NEXT NONSPACE CHARACTER -AN EXPRESSION?
004e  c0027b  		CALL	EXPR	;EVALUATE IT
004f  c00380  		CALL	STORE	;STORE THE RESULT
0050  f0002f  		JMP	DONE	;DONE
0051  c00242  PRINT:	CALL	SKIPSPACE	;GET NEXT NONSPACE CHARACTER
0052  c00071  		CALL	PRINTLIT	;PRINT LITERAL("..TEXT..") IF PRESENT
0053  c00242  PRINTC0:	CALL	SKIPSPACE	;GET NEXT NON-SPACE CHARACTER
0054  9c0b3b  		CPI	A,';'	;SEMICOLON?
0055  e4005f  		JNZ	PRINTC1	;IF NOT, CONTINUE
0056  1c0020  		MVI	A,' '	;PRINT SPACE
0057  c005a6  		CALL	CHROUT	
0058  620000  		INX	IRAM	;POINT NEXT PROGRAM CHARACTER
0059  c00242  PRINTE:	CALL	SKIPSPACE	;GET FIRST NON-SPACE CHARACTER
005a  9c0b0d  		CPI	A,CR	;END OF LINE?
005b  e0002f  		JZ	DONE	;IF SO, DONE W/O NEW LINE
005c  9c0b3a  		CPI	A,':'	;MULTISTATEMENT LINE? (TBX MOD)
005d  e0002f  		JZ	DONE	;IF SO, DONE W/O NEW LINE (TBX MOD)
005e  f00051  		JMP	PRINT	;IF NOT, BACK FOR MORE ITEMS TO PRINT
005f  9c0b2c  PRINTC1:	CPI	A,','	;ZONE SPACING?
0060  e40068  		JNZ	PRINTC2	;IF NOT, CONTINUE
0061  620000  		INX	IRAM	;POINT NEXT PROGRAM CHARACTER
0062  5c000a  PRINTL0:	LDR	A,ZONE	;GET ZONE COUNTER
0063  9c2207  		ANI	A,0B00000111	;MASK LOWER 3 BITS
0064  e00059  		JZ	PRINTE	;IF ZERO, DONE
0065  1c0020  		MVI	A,' '	;PRINT A SPACE
0066  c005a6  		CALL	CHROUT	
0067  f00062  		JMP	PRINTL0	;BACK TO CHECK IF END OF ZONE REACHED
0068  9c0b0d  PRINTC2:	CPI	A,CR	;END OF LINE?
0069  e0006f  		JZ	PRINTC3	;IF SO, CONTINUE  TBX START
006a  9c0b3a  		CPI	A,':'	;MULTISTATEMENT LINE?
006b  e0006f  		JZ	PRINTC3	;IF SO, CONTINUE
006c  c0027b  		CALL	EXPR	;ASSUME AN EXPRESSION AND EVALUATE IT
006d  c0007f  		CALL	PRINTNUM	;PRINT NUMERIC RESULT
006e  f00053  		JMP	PRINTC0	;CHECK FOR END OF LINE
006f  c005b0  PRINTC3:	CALL	NEWLINE	;NEW LINE
0070  f0002f  		JMP	DONE	;DONE TBX END
0071  5c0100  PRINTLIT:	LDX	A,(IRAM)	;GET CHARACTER
0072  9c0b22  		CPI	A,'"'	;BEGINNING QUOTATION MARK?
0073  dc0000  		RNZ		;IF NOT, RETURN	?
0074  620000  		INX	IRAM	;POINT NEXT PROGRAM CHARACTER
0075  5c0100  		LDX	A,(IRAM)	;GET CHARACTER
0076  c005a6  		CALL	CHROUT	;PRINT IT
0077  620000  PRINTLITL:	INX	IRAM	;POINT NEXT PROGRAM CHARACTER
0078  5c0100  		LDX	A,(IRAM)	;GET CHARACTER
0079  9c0b22  		CPI	A,'"'	;ENDING QUOTATION MARK?
007a  e0007d  		JZ	PRINTLITE	;IF SO, END IT
007b  c005a6  		CALL	CHROUT	;PRINT IT
007c  f00077  		JMP	PRINTLITL	;BACK FOR MORE CHARACTERS
007d  620000  PRINTLITE:	INX	IRAM	;POINT NEXT PROGRAM CHARACTER
007e  d00000  		RET		;RETURN	?
007f  a40200  PRINTNUM:	POP	L	;GET NUMBER OFF PP STACK
0080  a80200  		POP	H	
0081  880b80  		CPI	H,0B10000000	;NUMBER NEGATIVE?
0082  e80086  		JC	PRINTNUMC0	;IF NOT, CONTINUE
0083  c00428  		CALL	TWOCMP	;NEGATE IT
0084  1c002d  		MVI	A,'-'	;PRINT A MINUS SIGN
0085  c005a6  		CALL	CHROUT	
0086  3d0000  PRINTNUMC0:	MOV	A,H	;NUMBER IS ZERO?
0087  9ca800  		OR	A,L	
0088  140000  		MVI	C,0	;SUPPRESS LEADING ZEROS
0089  e40220  		JNZ	NUMOUT	;IF NOT, DISPLAY IT AND RETURN
008a  1c0030  		MVI	A,'0'	;PRINT A ZERO DIGIT AND RETURN
008b  f005a6  		JMP	CHROUT	
008c  440002  LIST:	LDR	L,PRGSTRT	;GET PROGRAM STARTING ADDRESS INTO IRAM
008d  480003  		LDR	H,PRGSTRT+1	
008e  c00242  		CALL	SKIPSPACE	;START LINE NUMBER TBX
008f  9c0b0d  		CPI	A,CR	
0090  e00097  		JZ	LISTC0	;IF NOT, CONTINUE
0091  c00364  		CALL	GETNUM	;GET LINE NUMBER
0092  ec05db  		JNC	ERR13	;IF NOT, RAISE EXPECTED LINE NUMBER ERROR
0093  ac0200  		POP	E	;GET IT INTO DE
0094  b00200  		POP	D	
0095  c00206  		CALL	FNDLBL	;GET STARTING ADDRESS OF LINE
0096  ec05cd  		JNC	ERR6	;RAISE UNKNOWN LINE NUMBER ERROR
0097  600000  LISTC0:	LDHL	IRAM	
0098  4c0004  		LDR	E,PRGEND	;GET PROGRAM ENDING ADDRESS IN DE
0099  500005  		LDR	D,PRGEND+1	
009a  258000  LISTL0:	MOV	L,E	
009b  2a0000  		MOV	H,D	
009c  790000  		CPHL	IRAM	;REACHED PROGRAM END?
009d  e00005  		JZ	WSTART	;IF SO, DO A WARM START
009e  480100  		LDX	H,(IRAM)	;GET LINE NUMBER
009f  620000  		INX	IRAM	
00a0  440100  		LDX	L,(IRAM)	
00a1  140000  		MVI	C,0	;SUPPRESS LEADING ZEROS
00a2  c00220  		CALL	NUMOUT	;PRINT LINE NUMBER
00a3  620000  		INX	IRAM	;SKIP LINE LENGTH BYTE
00a4  620000  		INX	IRAM	
00a5  5c0100  LISTL1:	LDX	A,(IRAM)	;GET CHARACTER
00a6  9c0b80  		CPI	A,0B10000000	;A KEYWORD?
00a7  e800ab  		JC	LISTC1	;IF NOT, CONTINUE
00a8  c0048e  		CALL	KEYOUT	;PRINT THE KEYWORD TBXC
00a9  620000  		INX	IRAM	;POINT NEXT BYTE
00aa  5c0100  		LDX	A,(IRAM)	;GET BYTE
00ab  c005a6  LISTC1:	CALL	CHROUT	;PRINT IT
00ac  620000  		INX	IRAM	;POINT NEXT CHARACTER
00ad  9c0b0d  		CPI	A,CR	;IS IT A CARRIAGE RETURN (END OF LINE)?
00ae  e400a5  		JNZ	LISTL1	;IF NOT, CONTINUE
00af  bc0000  		INP	A,CNTR_PORT	;GET KEYBOARD CHARACTER INTO A
00b0  9c2240  		ANI	A,KBY_MASK	;CHARACTER AVAILABLE?
00b1  e0009a  		JZ	LISTL0	;IF NOT, CONTINUE
00b2  bc0001  		INP	A,DATA_PORT	;GET THE ASCII CHARACTER
00b3  9c0b1b  		CPI	A,ESCAPE	;ESCAPE CODE?
00b4  e00005  		JZ	WSTART	;IF SO, DO A WARM START
00b5  f0009a  		JMP	LISTL0	;REACHED END OF PROGRAM?
00b6  440004  RUN:	LDR	L,PRGEND	;POINT HL TO PROGRAM END ADDRESS
00b7  480005  		LDR	H,PRGEND+1	
00b8  40820b  		STR	ARRYSTRT,L	;ARRAYS START AT PROGRAM END
00b9  41020c  		STR	ARRYSTRT+1,H	
00ba  440002  		LDR	L,PRGSTRT	;POINT IRAM TO PROGRAM START ADDRESS
00bb  480003  		LDR	H,PRGSTRT+1	
00bc  600000  		LDHL	IRAM	
00bd  440004  		LDR	L,PRGEND	;POINT IRAM TO PROGRAM START ADDRESS
00be  480005  		LDR	H,PRGEND+1	
00bf  790000  		CPHL	IRAM	;AT END OF PROGRAM?
00c0  e40019  		JNZ	STMPR	;IF NOT, GO TO STATEMENT PROCESSOR
00c1  f00005  		JMP	WSTART	;WARM START
00c2  c005b0  STOP:	CALL	NEWLINE	;SKIP LINE
00c3  6c00c4  		LXI	IROM,MSG_STOP	;PRINT STOP MESSAGE
00c4  c005ba  		CALL	MSGOUT	
00c5  440000  		LDR	L,CURLBL	;PRINT LINE NUMBER
00c6  480001  		LDR	H,CURLBL+1	
00c7  140000  		MVI	C,0	;SUPPRESS LEADING ZEROS
00c8  c00220  		CALL	NUMOUT	
00c9  f00005  		JMP	WSTART	;DONE - WARM START
00ca  c00242  GOTO:	CALL	SKIPSPACE	;GET LINE TARGET LINE NUMBER ON PP STACK
00cb  c0027b  		CALL	EXPR	
00cc  ac0200  		POP	E	LOAD IT INTO DE
00cd  b00200  		POP	D	
00ce  c00206  		CALL	FNDLBL	;FIND THE TARGET LINE NUMBER
00cf  ec05cd  		JNC	ERR6	;ON CARRY RESET, RAISE UNKNOWN LINE NUMBER ERROR
00d0  600000  		LDHL	IRAM	;POINT IRAM TO NEW LINE
00d1  f00019  		JMP	STMPR	;GO PROCESS IT
00d2  c001a8  IF:	CALL	LEXPR	;EVALUATE LOGICAL EXPRESSION
00d3  bc0200  		POP	A	;GET LOGICAL RESULT
00d4  9fc800  		RRC	A	;ROTATE INTO CARRY
00d5  e80024  		JC	STMPRC	;IF TRUE, PROCESS THEN
00d6  5c0100  IFDONE:	LDX	A,(IRAM)	;FIND CR
00d7  9c0b0d  		CPI	A,CR	
00d8  e0002f  		JZ	DONE	;IF FOUND, THEN DONE
00d9  620000  		INX	IRAM	
00da  f000d6  		JMP	IFDONE	
00db  280280  GOSUB:	MOV	H,IRAMH	;PUT RETURN ADDRESS ON PP STACK TBX
00dc  240200  		MOV	L,IRAML	
00dd  a10300  		PUSH	H	
00de  a08300  		PUSH	L	
00df  440011  		LDR	L,LTXTSTRT	;PUT LINE TEXT START ON PP STACK
00e0  480012  		LDR	H,LTXTSTRT+1	
00e1  a10300  		PUSH	H	
00e2  a08300  		PUSH	L	
00e3  f000ca  		JMP	GOTO	;TRANSFER EXECUTION TO LINE NUMBER
00e4  a40200  RETURN:	POP	L	;GET LINE TEXT START ADDRESS OFF PP STACK
00e5  a80200  		POP	H	
00e6  408211  		STR	LTXTSTRT,L	;TBX
00e7  410212  		STR	LTXTSTRT+1,H	
00e8  a40200  		POP	L	;GET RETURN ADDRESS OFF PP STACK
00e9  a80200  		POP	H	
00ea  600000  		LDHL	IRAM	;POINT IRAM THERE
00eb  5c0100  RETURNL:	LDX	A,(IRAM)	;FIND CR
00ec  9c0b0d  		CPI	A,CR	
00ed  e0002f  		JZ	DONE	;IF FOUND, THEN DONE
00ee  9c0b3a  		CPI	A,':'	;TBX
00ef  e0002f  		JZ	DONE	
00f0  620000  		INX	IRAM	
00f1  f000eb  		JMP	RETURNL	
00f2  c00242  INPUT:	CALL	SKIPSPACE	;SKIP TO FIRST NONSPACE
00f3  c00334  		CALL	GETVARADRS	;GET VARIABLE ADDRESS IN HL
00f4  ec05cf  		JNC	ERR7	;IF NOT A VARIABLE, RAISE EXPECTED VARIABLE ERROR
00f5  a10300  		PUSH	H	;PUT HL ON PP STACK
00f6  a08300  		PUSH	L	
00f7  3c0200  		MOV	A,IRAML	;SAVE CURRENT IRAM ADDRESS
00f8  43821a  		STR	INPTR,A	
00f9  3c0280  		MOV	A,IRAMH	
00fa  43821b  		STR	INPTR+1,A	
00fb  1c003f  		MVI	A,'?'	;PRINT A QUESTION MARK
00fc  c005a6  		CALL	CHROUT	
00fd  c00447  		CALL	BUFIN	;GET VALUE IN INPUT BUFFER
00fe  680000  		LXI	IRAM, BUFSTRT	;POINT IRAM TO START OF INPUT BUFFER
00ff  c00242  		CALL	SKIPSPACE	;SKIP SPACES
0100  c00364  INPUTC0:	CALL	GETNUM	;GET THE VALUE ON STACK
0101  c00380  		CALL	STORE	;STORE IT
0102  44001a  		LDR	L,INPTR	;RESTORE IRAM TO PROGRAM LINE
0103  48001b  		LDR	H,INPTR+1	
0104  600000  		LDHL	IRAM	
0105  f0002f  		JMP	DONE	;DONE
0106  c00434  NEW:	CALL	CINIT	;INITIALIZE FOR NEW PROGRAM
0107  f00005  		JMP	WSTART	;BACK TO MAIN LOOP 1
0108  240200  LOAD:	MOV	L,IRAML	;GET CURRENT PROGRAM ADDRESS IN HL
0109  280280  		MOV	H,IRAMH	
010a  c00434  		CALL	CINIT	;INITIALIZE FOR NEW PROGRAM
010b  600000  		LDHL	IRAM	;CURRENT PROGRAM ADDRESS INTO IRAM
010c  c00242  		CALL	SKIPSPACE	;SKIP TP FIRST NONSPACE
010d  c00364  		CALL	GETNUM	;GET NUMBER OF PROGRAM TO LOAD ON PP STACK
010e  a40200  		POP	L	;THEN INTO HL
010f  a80200  		POP	H	
0110  6c00e4  		LXI	IROM,PREPRGM	;POINT IROM TO START ADDRESS OF LOADED PROGRAMS
0111  84a800  LOADL0:	OR	L,L	;LOAD THIS PROGRAM? (NOTE: ASSUMES COUNT<256)
0112  e0011d  		JZ	LOADC0	;IF SO, GO LOAD IT
0113  660000  LOADL1:	INX	IROM	;LOOK FOR NEXT PROGRAM
0114  5c0300  		LDX	A,(IROM)	
0115  9c0bfe  		CPI	A,0XFE	
0116  e40111  		JNZ	LOADL0	
0117  660000  		INX	IROM	;POINT NEXT IROM BYTE
0118  5c0300  		LDX	A,(IROM)	
0119  9c0bff  		CPI	A,0XFF	;END OF PROGRAMS?
011a  e005d7  		JZ	ERR11	;RAISE NO PROGRAM ERROR
011b  846800  		DCR	L	;DECREMENT PROGRAM COUNTER
011c  f00111  		JMP	LOADL0	
011d  040000  LOADC0:	MVI	L,LO(BUFSTRT)	;POINT HL TO PROGRAM START ADDRESS
011e  080000  		MVI	H,HI(BUFSTRT)	
011f  5c0300  LOADL2:	LDX	A,(IROM)	;GET PROGRAM TO LOAD CHARACTER
0120  9fa800  		OR	A,A	;END OF LINE?
0121  e00127  		JZ	LOADC1	;IF SO, CONTINUE
0122  238000  		MOV	M,A	;STORE IT IN INPUT BUFFER
0123  840201  		ADI	L,1	;POINT TO NEXT BYTE
0124  881200  		ACI	H,0	
0125  660000  		INX	IROM	
0126  f0011f  		JMP	LOADL2	;REPEAT
0127  00000d  LOADC1:	MVI	M,CR	;PLACE CARRIAGE RETURN AT END OF LINE
0128  280380  		MOV	H,IROMH	;SAVE IROM
0129  240300  		MOV	L,IROML	
012a  a10300  		PUSH	H	
012b  a08300  		PUSH	L	
012c  c00463  		CALL	TRNS	;TRANSLATE KEYWORDS TBXC
012d  a40200  		POP	L	;RESTORE IROM
012e  a80200  		POP	H	
012f  640000  		LDHL	IROM	
0130  c004a2  		CALL	TSTL	;COMMAND OR STATEMENT (TO INSERT)
0131  ec0010  		JNC	CMDPR	;IF A COMMAND, GO EXECUTE IT
0132  c004db  		CALL	INSRT	;INSERT THE LINE
0133  660000  		INX	IROM	
0134  5c0300  		LDX	A,(IROM)	
0135  9c0bfe  		CPI	A,0XFE	;END OF PROGRAM?
0136  e00005  		JZ	WSTART	;IF SO, DO A WARM START
0137  f0011d  		JMP	LOADC0	;REPEAT
0138  440006  REM:	LDR	L,TXTSTRT	;GET START OF TEXT
0139  480007  		LDR	H,TXTSTRT+1	
013a  600000  		LDHL	IRAM	;POINT IRAM TO START OF TEXT
013b  630000  		DCX	IRAM	;BACK ONE LOCATION
013c  440100  		LDX	L,(IRAM)	;GET STATEMENT LENGTH IN HL
013d  080000  		MVI	H,0	
013e  610000  		ADHL	IRAM	;POINT IRAM TO START OF NEXT STATEMENT
013f  630000  		DCX	IRAM	;BACK TO CR
0140  f0002f  		JMP	DONE	;DONE
0141  c00242  DIM:	CALL	SKIPSPACE	;POINT TO VARIABLE
0142  9c02c0  		ADI	A,0XC0	;A-Z OR A-Z?
0143  ec05cf  		JNC	ERR7	;IF NOT, RAISE EXPECTED VARIABLE ERROR
0144  620000  		INX	IRAM	;POINT NEXT CHARACTER IN DATA RAM
0145  9c221f  		ANI	A,0B00011111	;MASK LOWER BITS
0146  9c6800  		DCR	A	;ADJUST TO ZERO BASE
0147  9fc000  		RLC	A	;MULTIPLY BY 2
0148  040048  		MVI	L,LO(VARSTRT)	;CALCULATE ADDRESS
0149  080000  		MVI	H,HI(VARSTRT)	
014a  878000  		ADD	L,A	
014b  881200  		ACI	H,0	
014c  a10300  		PUSH	H	;PUT VARIABLE ADDRESS ON STACK
014d  a08300  		PUSH	L	
014e  44000b  		LDR	L,ARRYSTRT	;GET ARRAY START IN HL
014f  48000c  		LDR	H,ARRYSTRT+1	
0150  a10300  		PUSH	H	;PUT ON STACK
0151  a08300  		PUSH	L	
0152  c00380  		CALL	STORE	;STORE ARRAY START IN VARIABLE
0153  5c0100  		LDX	A,(IRAM)	;OPEN PRENTHESIS?
0154  9c0b28  		CPI	A,'('	
0155  e405c1  		JNZ	ERR0	;IF NOT, RAISE SYNTAX ERROR
0156  620000  		INX	IRAM	;POINT NEXT BYTE
0157  c0027b  		CALL	EXPR	;GET FIRST DIMENSION
0158  44000b  		LDR	L,ARRYSTRT	;GET ARRAY START IN HL
0159  48000c  		LDR	H,ARRYSTRT+1	
015a  ac0200  		POP	E	;POP FIRST DIMENSION IN DE
015b  b00200  		POP	D	
015c  9c0b29  		CPI	A,')'	;SHOULD BE CLOSED PARENTHESIS?
015d  e405c1  		JNZ	ERR0	;IF NOT, RAISE A SYNTAX ERROR
015e  620000  		INX	IRAM	;POINT NEXT PROGRAM BYTE
015f  8dc000  		RLC	E	;DOUBLE FIRST DIMENION
0160  925000  		RAL	D	
0161  e805df  		JC	ERR15	;RAISE OUT OF MEMORY ERROR
0162  8c8000  		ADD	E,L	;CALCULATE NEW ARRAY START
0163  911000  		ADC	D,H	
0164  e805df  		JC	ERR15	;IF CARRY, RAISE OUT OF MEMORY ERROR.
0165  900bfe  		CPI	D,HI(MEMEND)	;CHECK OUT OF MEMORY?
0166  ec05df  		JNC	ERR15	;IF SO, RAISE OUT OF MEMORY ERROR
0167  41820b  		STR	ARRYSTRT,E	;STORE IT
0168  42020c  		STR	ARRYSTRT+1,D	
0169  000000  DIML:	MVI	M,0	;ZERO ARRAY MEMORY
016a  840201  		ADI	L,1	;INCREMENT HL
016b  881200  		ACI	H,0	
016c  858900  		CMP	L,E	;DONE?
016d  e40169  		JNZ	DIML	;IF SO, CONTINUE
016e  8a0900  		CMP	H,D	
016f  e40169  		JNZ	DIML	;IF SO, CONTINUE
0170  c00242  		CALL	SKIPSPACE	;GET NEXT PROGRAM BYTE
0171  9c0b2c  		CPI	A,','	;MORE VARIABLES TO DIMENSION?
0172  e4002f  		JNZ	DONE	;IF NOT, THEN DONE
0173  620000  		INX	IRAM	
0174  f00141  		JMP	DIM	;PROCESS ANOTHER VARIABLE
0175  c00242  RPT:	CALL	SKIPSPACE	;CHECK FOR END OF LINE?
0176  9c0b0d  		CPI	A,CR	
0177  e4017c  		JNZ	RPTC	;IF NOT, CONTINUE
0178  440011  RPTE:	LDR	L,LTXTSTRT	;GET (LINE TEXT START - 1) INTO IRAM
0179  480012  		LDR	H,LTXTSTRT+1	
017a  600000  		LDHL	IRAM	
017b  f00023  		JMP	STMPRNS	;GO PROCESS IT
017c  c001a8  RPTC:	CALL	LEXPR	;ASSUME LOGICAL EXPRESSION
017d  bc0200  		POP	A	;GET LOGICAL RESULT
017e  9fc800  		RRC	A	;ROTATE INTO CARRY
017f  e80178  		JC	RPTE	;IF TRUE, REPEAT LINE
0180  f0002f  		JMP	DONE	
0181  c00242  READ:	CALL	SKIPSPACE	;CHECK FOR END OF LINE?
0182  c00334  		CALL	GETVARADRS	;GET VARIABLE ADDRESS IN HL
0183  ec05d5  		JNC	ERR10	;IF NO VARIABLE, RAISE EXPECTED VARIABLE ERROR
0184  c00242  		CALL	SKIPSPACE	;SHOULD BE AN EQUAL SIGN
0185  9c0b3d  		CPI	A,'='	
0186  e405c1  		JNZ	ERR0	;IF NOT, RAISE SYNTAX ERROR
0187  620000  		INX	IRAM	;POINT NEXT PROGRAM BYTE
0188  a10300  READL:	PUSH	H	;PUT ADDRESS ON PP STACK
0189  a08300  		PUSH	L	
018a  c00242  		CALL	SKIPSPACE	;GET DATA VALUE
018b  c00364  		CALL	GETNUM	
018c  ec05db  		JNC	ERR13	;IF NOT A NUMBER, RAISE EXPECTED NUMBER ERROR
018d  c00380  		CALL	STORE	STORE IT
018e  c00242  		CALL	SKIPSPACE	;GET NEXT PROGRAM BYTE
018f  9c0b2c  		CPI	A,','	;MORE DATA?
0190  e4002f  		JNZ	DONE	;IF NOT, DONE
0191  620000  		INX	IRAM	;POINT NEXT PROGRAM BYTE
0192  840201  		ADI	L,1	;INCREMENT HL
0193  881200  		ACI	H,0	
0194  f00188  		JMP	READL	;DO AGAIN
0195  c00242  THEN:	CALL	SKIPSPACE	;GET NEXT PROGRAM BYTE
0196  c00378  		CALL	CHKNUM	;IS NUMERIC?
0197  e800ca  		JC	GOTO	;IF SO, THEN PROCESS GOTO
0198  f00024  		JMP	STMPRC	;OTHERWISE, PROCESS STATEMENT
0199  c005b4  CLR:	CALL	CLRSCR	;CALL CLEAR SCREEN SUBROUTINE
019a  f0002f  		JMP	DONE	
019b  c00242  POKE:	CALL	SKIPSPACE	;GET NEXT NONSPACE BYTE
019c  c0027b  		CALL	EXPR	;GET ADDRESS TO POKE
019d  c00242  		CALL	SKIPSPACE	;GET NEXT NON-SPACE BYTE
019e  9c0b2c  		CPI	A,','	;SHOULD BE A COMMA?
019f  e405c1  		JNZ	ERR0	;IF NOT, RAISE SYNTAX ERROR
01a0  620000  		INX	IRAM	
01a1  c0027b  		CALL	EXPR	;GET VALUE TO POKE
01a2  ac0200  		POP	E	;GET VALUE TO POKE IN E
01a3  b00200  		POP	D	
01a4  a40200  		POP	L	GET ADDRESS IN HL
01a5  a80200  		POP	H	
01a6  218000  		MOV	M,E	;POKE IT!
01a7  f0002f  		JMP 	DONE	;DONE
01a8  c00242  LEXPR:	CALL	SKIPSPACE	;SKIP TO FIRST NONSPACE CHARACTER
01a9  9c0b21  		CPI	A,'!'	;NEGATION?
01aa  e401b1  		JNZ	LEXPR0	;IF NOT, CONTINUE
01ab  620000  		INX	IRAM	;POINT NEXT PROGRAM BYTE
01ac  c001a8  		CALL	LEXPR	;EVALUATE LOGICAL EXPRESSION
01ad  bc0200  		POP	A	;NEGATE IT
01ae  9c3201  		XRI	A,0X01	
01af  a38300  		PUSH	A	
01b0  f001b2  		JMP	LEXPR1	
01b1  c001c7  LEXPR0:	CALL	LTERM	;EVALUATE RELATIONAL EXPRESSION
01b2  c00242  LEXPR1:	CALL	SKIPSPACE	;GET NEXT PROGRAM BYTE
01b3  9c0b26  		CPI	A,'&'	;LOGICAL AND?
01b4  e401bd  		JNZ	LEXPR2	;IF NOT, CONTINUE
01b5  620000  		INX	IRAM	;POINT NEXT PROGRAM BYTE
01b6  c00242  		CALL	SKIPSPACE	;GET PROBRAM BYTE
01b7  c001c7  		CALL	LTERM	EVALUATE RELATIONAL EXPRESSION
01b8  bc0200  		POP	A	;GET SECOND RESULT
01b9  b80200  		POP	B	;GET FIRST RESULT
01ba  9f2000  		AND	A,B	;AND THE RESULTS
01bb  a38300  		PUSH	A	;RESULT BACK ON PP STACK
01bc  d00000  		RET		;DONE	?
01bd  9c0b7c  LEXPR2:	CPI	A,'|'	;LOGICAL OR?
01be  dc0000  		RNZ		;IF NOT, DONE	?
01bf  620000  		INX	IRAM	;POINT NEXT PROGRAM BYTE
01c0  c00242  		CALL	SKIPSPACE	;GET PROGRAM BYTE
01c1  c001c7  		CALL	LTERM	;EVALUATE RELATIONAL EXPRESSION
01c2  bc0200  		POP	A	;GET SECOND RESULT
01c3  b80200  		POP	B	;GET FIRST RESULT
01c4  9f2800  		OR	A,B	;OR THE RESULTS
01c5  a38300  		PUSH	A	;RESULT BACK ON PP STACK
01c6  d00000  		RET		;DONE	?
01c7  9c0b28  LTERM:	CPI	A,'('	
01c8  e401d0  		JNZ	REXPR	
01c9  620000  		INX	IRAM	
01ca  c001a8  		CALL	LEXPR	
01cb  c00242  		CALL	SKIPSPACE	
01cc  9c0b29  		CPI	A,')'	
01cd  e405dd  		JNZ	ERR14	
01ce  620000  		INX	IRAM	
01cf  d00000  		RET			?
01d0  1c0000  REXPR:	MVI	A,0	;PRESET FALSE RESULT
01d1  a38300  		PUSH	A	
01d2  c00242  		CALL	SKIPSPACE	;SKIP TO FIRST NONSPACE CHARACTER
01d3  c0027b  		CALL	EXPR	;GET FIRST VALUE ON PP STACK
01d4  140080  		MVI	C,0B10000000	;SET FIRST PASS BIT 7 IN RELOP STATUS BYTE
01d5  c00242  REXPRL0:	CALL	SKIPSPACE	;GET FIRST RELATIONAL OPERATOR (RELOP)
01d6  9c0b3c  		CPI	A,'<'	;LESS THAN?
01d7  e401da  		JNZ	REXPRC0	;IF NOT, CONTINUE
01d8  942a01  		ORI	C,0B00000001	;SET LESS THAN BIT 0
01d9  f001e5  		JMP	REXPRC3	;LOOK FOR NEXT RELOP
01da  9c0b3e  REXPRC0:	CPI	A,'>'	;GREATER THAN?
01db  e401de  		JNZ	REXPRC1	;IF NOT , CONTINUE
01dc  942a02  		ORI	C,0B00000010	;SET GREATER THAN BIT 1
01dd  f001e5  		JMP	REXPRC3	;LOOK FOR NEXT RELOP
01de  9c0b3d  REXPRC1:	CPI	A,'='	;EQUAL?
01df  e401e2  		JNZ	REXPRC2	;IF NOT, CONTIINUE
01e0  942a04  		ORI	C,0B00000100	;SET EQUAL BIT 2
01e1  f001e5  		JMP	REXPRC3	;CONTINUE
01e2  940b80  REXPRC2:	CPI	C,0B10000000	;FIRST PASS?
01e3  ec05cd  		JNC	ERR6	;RAISE EXPECTED RELOP ON FIRST PASS ERROR
01e4  f001ea  		JMP	REXPRC4	;CONTINUE
01e5  620000  REXPRC3:	INX	IRAM	;POINT NEXT RELOP OPERATOR (IF ANY)
01e6  940b80  		CPI	C,0B10000000	;FIRST PASS?
01e7  e801ea  		JC	REXPRC4	;IF NOT, THEN CONTINUE
01e8  942207  		ANI	C,0B00000111	;MASK OFF FIRST PASS BIT AND DO SECOND PASS
01e9  f001d5  		JMP	REXPRL0	
01ea  c00242  REXPRC4:	CALL	SKIPSPACE	;GET SECOND VALUE
01eb  428219  		STR	ROFLAG,C	;SAVE C
01ec  c0027b  		CALL	EXPR	
01ed  c00394  		CALL	SUB	;SUBTRACT THE TWO VALUES
01ee  a40200  		POP	L	;RESULT 0?
01ef  a80200  		POP	H	
01f0  540019  		LDR	C,ROFLAG	;RESTORE C
01f1  3d0000  		MOV	A,H	
01f2  9ca800  		OR	A,L	
01f3  e401f8  		JNZ	REXPRC5	;IF NOT, CONTINUE
01f4  3e8000  		MOV	A,C	;EQUAL BIT SET?
01f5  9c2204  		ANI	A,0B00000100	
01f6  e40202  		JNZ	REXPRT	;IF SO, PROCESS THEN
01f7  d00000  		RET		;IF NOT, THEN DONE	?
01f8  880b80  REXPRC5:	CPI	H,0B10000000	;RESULT<0?
01f9  e801fe  		JC	REXPRC6	;IF NOT, CONTINUE
01fa  3e8000  		MOV	A,C	;LESS THAN BIT SET?
01fb  9c2201  		ANI	A,0B00000001	
01fc  e40202  		JNZ	REXPRT	;IF SO, THEN PROCESS THEN
01fd  d00000  		RET		;IF NOT, THEN DONE	?
01fe  3e8000  REXPRC6:	MOV	A,C	;GREATER THAN BIT SET?
01ff  9c2202  		ANI	A,0B00000010	
0200  e40202  		JNZ	REXPRT	;IF SO, THEN PROCESS THEN
0201  d00000  		RET			?
0202  bc0200  REXPRT:	POP	A	;SWITCH RESULT TO TRUE
0203  9c3201  		XRI	A,0X01	
0204  a38300  		PUSH	A	
0205  d00000  		RET			?
0206  440002  FNDLBL:	LDR	L,PRGSTRT	;GET START OF PROGRAM IN HL
0207  480003  		LDR	H,PRGSTRT+1	
0208  540004  		LDR	C,PRGEND	;GET END OF PROGRAM IN BC
0209  580005  		LDR	B,PRGEND+1	
020a  8b0900  FNDLBLL:	CMP	H,B	;REACHED END OF PROGRAM?
020b  e4020e  		JNZ	FNDLBLC0	
020c  868900  		CMP	L,C	
020d  d80000  		RZ		;IF SO, RETURN CARRY RESET	?
020e  820900  FNDLBLC0:	CMP	M,D	;MS BYTE MATCH?
020f  e40218  		JNZ	FNDLBLC1	;IF NOT,  SKIP TO NEXT LINE
0210  840201  		ADI	L,1	;POINT LS BYTE
0211  881200  		ACI	H,0	
0212  818900  		CMP	M,E	;LSB MATCH?
0213  e4021a  		JNZ	FNDLBLC2	;IF NOT, SKIP TO NEXT LINE
0214  840a01  		SUI	L,1	;FOUNT IT!
0215  881a00  		SBI	H,0	;POINT BACK TO START OF LINE
0216  807000  		STC		;SET CARRY	?
0217  d00000  		RET		;RETURN	?
0218  840201  FNDLBLC1:	ADI	L,1	;POINT NEXT BYTE (LSB)
0219  881200  		ACI	H,0	
021a  840201  FNDLBLC2:	ADI	L,1	;POINT NEXT BYTE (LINE LENGTH)
021b  881200  		ACI	H,0	
021c  3c0000  		MOV	A,M	;GET LENGTH OF LINE IN A
021d  878000  		ADD	L,A	;COMPUTE NEW LINE START
021e  881200  		ACI	H,0	
021f  f0020a  		JMP	FNDLBLL	;TRY AGAIN
0220  a38300  NUMOUT:	PUSH	A	;SAVE IT
0221  a20300  		PUSH	D	;SAVE DE
0222  a18300  		PUSH	E	
0223  0c0010  		MVI	E,LO(10000)	;DISPLAY 10000'S DIGIT
0224  100027  		MVI	D,HI(10000)	
0225  c00236  		CALL	CNVRT	
0226  0c00e8  		MVI	E,LO(1000)	;DISPLAY 1000'S DIGIT
0227  100003  		MVI	D,HI(1000)	
0228  c00236  		CALL	CNVRT	
0229  0c0064  		MVI	E,LO(100)	;DISPLAY 100'S DIGIT
022a  100000  		MVI	D,HI(100)	
022b  c00236  		CALL	CNVRT	
022c  0c000a  		MVI	E,LO(10)	;DISPLAY 10'S DIGIT
022d  100000  		MVI	D,HI(10)	
022e  c00236  		CALL	CNVRT	
022f  840230  		ADI	L,48	
0230  3c8000  		MOV	A,L	
0231  c005a6  		CALL	CHROUT	
0232  ac0200  		POP	E	;RESTORE DE AND A
0233  b00200  		POP	D	
0234  bc0200  		POP	A	
0235  d00000  		RET			?
0236  1c00ff  CNVRT:	MVI	A,255	;INITIALIZE COUNT = -1
0237  9c0201  CNVRTL0:	ADI	A,1	;INCREMENT AND STORE COUNT
0238  858800  		SUB	L,E	
0239  8a1800  		SBB	H,D	
023a  ec0237  		JNC	CNVRTL0	;IF RESULT NOT NEGATIVE, SUBTRACT AGAIN
023b  858000  		ADD	L,E	
023c  8a1000  		ADC	H,D	
023d  9e8900  		CMP	A,C	;SUPPRESS ZEROS?
023e  d80000  		RZ		;IF SO, DON'T DISPLAY THE DIGIT	?
023f  946800  		DCR	C	;TURN OFF ZERO SUPPRESSION FLAG
0240  9c0230  		ADI	A,48	ADD ASCII BIAS
0241  f005a6  		JMP	CHROUT	;DISPLAY THE DIGIT
0242  5c0100  SKIPSPACE:	LDX	A,(IRAM)	;GET CHARACTER
0243  9c0b20  		CPI	A,' '	;A SPACE?
0244  dc0000  		RNZ		;IF NOT , RETURN	?
0245  620000  		INX	IRAM	;POINT NEXT BYTE IN DATA RAM
0246  f00242  		JMP	SKIPSPACE	;REPEAT
0247  300280  GETKEY:	MOV	D,IRAMH	;GET CURRENT START OF TEXT
0248  2c0200  		MOV	E,IRAML	
0249  6c0019  		LXI	IROM,KEYTBL	;POINT IROM TO START OF KEWWORD TABLE
024a  140000  GETKEYL0:	MVI	C,0	;ZERO KEYWORD LINK TABLE COUNTER
024b  2a0000  GETKEYL1:	MOV	H,D	;RESTORE IRAM TO START OF TEXT
024c  258000  		MOV	L,E	
024d  600000  		LDHL	IRAM	
024e  580100  GETKEYL2:	LDX	B,IRAM	;GET TEXT BYTE
024f  9802c0  		ADI	B,0XC0	;NON-ALPHABETIC?
0250  de0000  		RNC		;IF SO, DONE WITH CARRY RESET	?
0251  980240  		ADI	B,0X40	;MAKE ALPHABETIC
0252  9822df  		ANI	B,0B11011111	;MAKE UPPER CASE
0253  5c0300  		LDX	A,(IROM)	;GET KEY TABLE BYTE
0254  9c227f  		ANI	A,0B01111111	;MASK OFF MSBIT
0255  9f0900  		CMP	A,B	;SAME?
0256  e40264  		JNZ	GETKEYC0	;IF NOT, CONTINUE
0257  5c0300  		LDX	A,(IROM)	;GET KEYWORD BYTE
0258  9c0b80  		CPI	A,0B10000000	;END OF CURRENT KEYWORD?
0259  ec026e  		JNC	GETKEYE1	;FOUND THE KEYWORD, CONTINUE
025a  660000  		INX	IROM	;POINT NEXT TEXT BYTE IN DATA RAM
025b  620000  		INX	IRAM	;POINT NEXT KEYWORD BYTE IN DATA ROM
025c  5c0100  		LDX	A,(IRAM)	;GET TEXT BYTE
025d  9c0b41  		CPI	A,'A'	;ALPHABETIC?
025e  ec024e  		JNC	GETKEYL2	;IF SO, TRY AGAIN
025f  2a0000  GETKEYE0:	MOV	H,D	;RESTORE IRAM TO START OF TEXT
0260  258000  		MOV	L,E	
0261  600000  		LDHL	IRAM	
0262  9fa000  		AND	A,A	;NOT FOUND. RESET CARRY AND RETURN
0263  d00000  		RET			?
0264  5c0300  GETKEYC0:	LDX	A,(IROM)	;GET KEYWORD BYTE
0265  9c0b80  		CPI	A,0B10000000	;END OF KEYWORD?
0266  660000  		INX	IROM	;POINT NEXT BYTE IN KEYWORD TABLE
0267  e80264  		JC	GETKEYC0	;LOOP UNTIL END OF KEYWORD FOUND
0268  5c0300  		LDX	A,(IROM)	;GET KEYWORD BYTE
0269  9fa800  		OR	A,A	;END OF KEYWORD TABLE?
026a  620000  		INX	IRAM	;POINT NEXT TEXT BYTE IN DATA RAM
026b  e0025f  		JZ	GETKEYE0	;IF SO, NOT FOUND AND RETURN
026c  946000  		INR	C	;INCREMENT KEYWORD COUNTER
026d  f0024b  		JMP	GETKEYL1	;KEEP LOOKING IN KEYWORD TABLE
026e  620000  GETKEYE1:	INX	IRAM	;POINT NEXT TEXT BYTE IN DATA RAM
026f  807000  		STC		;SET CARRY	?
0270  d00000  		RET		;RETURN	?
0271  040069  GETLINK:	MVI	L,LO(LINKTBL)	;POINT HL TO START OF LINK TABLE
0272  080000  		MVI	H,HI(LINKTBL)	
0273  96c000  		RLC	C	;DOUBLE C
0274  868000  		ADD	L,C	;CALCULATE ADDRESS
0275  881200  		ACI	H,0	
0276  640000  		LDHL	IROM	;TRANSFER HL TO IROM
0277  440300  		LDX	L,(IROM)	;GET ADDRESS
0278  660000  		INX	IROM	
0279  480300  		LDX	H,(IROM)	
027a  d00000  		RET			?
027b  5c0100  EXPR:	LDX	A,(IRAM)	;GET CHARACTER IN DATA RAM
027c  9c0b2b  		CPI	A,'+'	;IS IT A PLUS SIGN
027d  e40280  		JNZ	EXPRC0	;IF NOT, CONTINUE
027e  620000  		INX	IRAM	;IF SO, IGNORE IT
027f  f00287  		JMP	EXPRC1	
0280  5c0100  EXPRC0:	LDX	A,(IRAM)	;GET NEXT CHARACTER IN DATA RAM
0281  9c0b2d  		CPI	A,'-'	;IS IT A NEGATION?
0282  e40287  		JNZ	EXPRC1	;IF NOT, CONTINUE
0283  620000  		INX	IRAM	;POINT TO NEXT CHARACTER IN DATA RAM
0284  c00298  		CALL	TERM	;IF SO, EVALUATE A TERM
0285  c00421  		CALL	NEG	;NEGATE THE RESULT
0286  f00288  		JMP	EXPRC2	;CONTINUE
0287  c00298  EXPRC1:	CALL	TERM	
0288  5c0100  EXPRC2:	LDX	A,(IRAM)	;GET CHARACTER IN DATA RAM
0289  9c0b2b  		CPI	A,'+'	;IS IT ADDITION?
028a  e4028f  		JNZ	EXPRC3	;IF NOT, CONTINUE
028b  620000  		INX	IRAM	;GET NEXT CHARACTER IN DATA RAM
028c  c00298  		CALL	TERM	
028d  c0038a  		CALL	ADD	
028e  f00288  		JMP	EXPRC2	;REPEAT
028f  5c0100  EXPRC3:	LDX	A,(IRAM)	;GET CHARACTER IN DATA RAM
0290  9c0b2d  		CPI	A,'-'	;IS IT SUBTRACTION?
0291  e40297  		JNZ	EXPRC4	;IF NOT, CONTINUE
0292  620000  		INX	IRAM	;GET NEXT CHARACTER IN DATA RAM
0293  c00298  		CALL	TERM	
0294  c00421  		CALL	NEG	;NEGATE THE RESULT
0295  c0038a  		CALL	ADD	
0296  f00288  		JMP	EXPRC2	
0297  d00000  EXPRC4:	RET			?
0298  c002af  TERM:	CALL	FACTOR	
0299  5c0100  EXPRC5:	LDX	A,(IRAM)	;GET CHARACTER IN DATA RAM
029a  9c0b2a  		CPI	A,'*'	;IS IT MULTIPLICATION?
029b  e402a0  		JNZ	EXPRC6	;IF NOT, CONTINUE
029c  620000  		INX	IRAM	;POINT TO NEXT CHARACTER IN DATA RAM
029d  c002af  		CALL	FACTOR	
029e  c003a1  		CALL	MUL	
029f  f00299  		JMP	EXPRC5	;REPEAT
02a0  5c0100  EXPRC6:	LDX	A,(IRAM)	;GET CHARACTER IN DATA RAM
02a1  9c0b2f  		CPI	A,'/'	;IS IT DIVISION?
02a2  e402a7  		JNZ	EXPRC7	;IF NOT, CONTINUE
02a3  620000  		INX	IRAM	;POINT TO NEXT CHARACTER IN DATA RAM
02a4  c002af  		CALL	FACTOR	
02a5  c003ce  		CALL	DIV	
02a6  f00299  		JMP	EXPRC5	;REPEAT
02a7  5c0100  EXPRC7:	LDX	A,(IRAM)	;GET CHARACTER IN DATA RAM
02a8  9c0b25  		CPI	A,'%'	;IS IT MODULO?
02a9  e402ae  		JNZ	EXPRC8	;IF NOT, CONTINUE
02aa  620000  		INX	IRAM	;POINT TO NEXT CHARACTER IN DATA RAM
02ab  c002af  		CALL	FACTOR	
02ac  c00412  		CALL	MODULO	
02ad  f00299  		JMP	EXPRC5	;REPEAT
02ae  d00000  EXPRC8:	RET		;DONE	?
02af  c002c3  FACTOR:	CALL	GETFNCT	;IS IT A FUNCTION?
02b0  da0000  		RC		IF SO, PUT ON PP STACK AND RETURN	?
02b1  c0035a  		CALL	GETVAR	;IS IT A NUMBER?
02b2  da0000  		RC		;IF SO, PUT ON PP STACK AND RETURN	?
02b3  c00364  		CALL	GETNUM	;IS IT A VARIABLE?
02b4  da0000  		RC		;IF SO, PUT ON PP STACK AND RETURN	?
02b5  5c0100  		LDX	A,(IRAM)	;GET CHARACTER IN DATA RAM
02b6  9c0b28  		CPI	A,'('	;OPEN PARENTHESES?
02b7  e405d3  		JNZ	ERR9	;IF NOT, INVALID EXPRESSION
02b8  620000  		INX	IRAM	;POINT NEXT CHARACTER
02b9  c0027b  		CALL	EXPR	;CALL 
02ba  9c0b29  		CPI	A,')'	;CLOSED PARENTHESES
02bb  e405d3  		JNZ	ERR9	;IF NOT, INVALID EXPRESSION
02bc  620000  		INX	IRAM	;POINT NEXT CHARACTER
02bd  d00000  		RET			?
02be  5c0100  SKSPC:	LDX	A,(IRAM)	;GET THE CHARACTER
02bf  9c0b20  		CPI	A,' '	;IS IT A SPACE?
02c0  dc0000  		RNZ		;IF NOT, RETURN	?
02c1  620000  		INX	IRAM	;POINT NEXT CHARACTER IN DATA RAM
02c2  f002be  		JMP	SKSPC	;REPEAT
02c3  5c0100  GETFNCT:	LDX	A,(IRAM)	;GET KEY NUMBER IN A
02c4  9c227f  		ANI	A,0B01111111	;MASK OFF MS BIT
02c5  9c0b12  		CPI	A,RANDOM	;IS IT RND?
02c6  e002cb  		JZ	RNDM	;IF SO, PROCESS IT
02c7  9c0b14  		CPI	A,PEEKID	;IS IT PEEK?
02c8  e0030b  		JZ	PEEK	;IF SO, PROCESS IT
02c9  9f8800  		SUB	A,A	;RESET CARRY AND RETURN
02ca  d00000  		RET			?
02cb  620000  RNDM:	INX	IRAM	;POINT NEXT BYTE
02cc  5c0100  		LDX	A,(IRAM)	;GET PRIGRAM BYTE
02cd  9c0b28  		CPI	A,'('	;SHOULD BE AN OPEN PARENTHESES?
02ce  e405c1  		JNZ	ERR0	;IF NOT, RAISE SYNTAX ERROR
02cf  620000  		INX	IRAM	;POINT NEXT CHARACTER
02d0  c0027b  		CALL	EXPR	;GET OPTION PARAMETER
02d1  c00242  		CALL	SKIPSPACE	;GET NEXT NONSPACE CHARACTER
02d2  9c0b29  		CPI	A,')'	;SHOULD BE A CLOSED PARENTHESES
02d3  e405c1  		JNZ	ERR0	;IF NOT, RAISE SYNTAX ERROR
02d4  620000  		INX	IRAM	
02d5  a40200  		POP	L	
02d6  a80200  		POP	H	
02d7  840b00  		CPI	L,0	;IS IT 0 - NEW RANDOM NUMBER?
02d8  e002de  		JZ	RNDML0	;IF SO, CONTINUE HERE
02d9  840b01  		CPI	L,1	;IS IT 1 - RANDOMIZE FIRST
02da  e0031d  		JZ	RNDMZ	;IF SO, CONTINUE HERE
02db  840b02  		CPI	L,2	IS IT 2 - RESTART THE RANDOM SEQUENCE FIRST
02dc  e00327  		JZ	RNDMRST	;IF SO, CONTINUE HERE
02dd  f005d9  		JMP	ERR12	;INVALID FUNCTION PARAMETER ERROR
02de  0800ff  RNDML0:	MVI	H,0XFF	;THE 
02df  040016  		MVI	L,SEED4	
02e0  180008  		MVI	B,8	
02e1  3c0000  RNDML1:	MOV	A,M	
02e2  9fc000  		RLC	A	
02e3  9c1200  		ACI	A,0	
02e4  9fc000  		RLC	A	
02e5  9c1200  		ACI	A,0	
02e6  9fc000  		RLC	A	
02e7  9c1200  		ACI	A,0	
02e8  9c3000  		XOR	A,M	
02e9  9fd000  		RAL	A	
02ea  9fd000  		RAL	A	
02eb  846800  		DCR	L	
02ec  846800  		DCR	L	
02ed  846800  		DCR	L	
02ee  3c0000  		MOV	A,M	
02ef  9fd000  		RAL	A	
02f0  238000  		MOV	M,A	
02f1  846000  		INR	L	
02f2  3c0000  		MOV	A,M	
02f3  9fd000  		RAL	A	
02f4  238000  		MOV	M,A	
02f5  846000  		INR	L	
02f6  3c0000  		MOV	A,M	
02f7  9fd000  		RAL	A	
02f8  238000  		MOV	M,A	
02f9  846000  		INR	L	
02fa  3c0000  		MOV	A,M	
02fb  9fd000  		RAL	A	
02fc  238000  		MOV	M,A	
02fd  986800  		DCR	B	
02fe  e402e1  		JNZ	RNDML1	
02ff  480015  		LDR	H,SEED3	
0300  440016  		LDR	L,SEED4	
0301  882203  		ANI	H,0X03	
0302  880b03  		CPI	H,0X03	
0303  e00309  		JZ	RNDMC2	
0304  ec02de  RNDMC1:	JNC	RNDML0	
0305  a10300  		PUSH	H	
0306  a08300  		PUSH	L	
0307  807000  		STC		;SET CARRY AND RETURN	?
0308  d00000  		RET			?
0309  840be8  RNDMC2:	CPI	L,0XE8	
030a  f00304  		JMP	RNDMC1	
030b  620000  PEEK:	INX	IRAM	;POINT NEXT BYTE
030c  5c0100  		LDX	A,(IRAM)	;GET PROGRAM BYTE
030d  9c0b28  		CPI	A,'('	;SHOULD BE AN OPEN PARENTHESIS?
030e  e405dd  		JNZ	ERR14	;IF NOT, RAISE EXPECTED PAREN. ERROR
030f  620000  		INX	IRAM	;POINT NEXT BYTE
0310  c0027b  		CALL	EXPR	;GET THE ADDRESS
0311  a40200  		POP	L	;GET ADDRESS IN HL
0312  a80200  		POP	H	
0313  3c0000  		MOV	A,M	;GET MEMORY BYTE
0314  080000  		MVI	H,0	;PUSH ON TO PP STACK
0315  a10300  		PUSH	H	
0316  a38300  		PUSH	A	
0317  5c0100  		LDX	A,(IRAM)	;GET PROGRAM BYTE
0318  9c0b29  		CPI	A,')'	;SHOULD BE CLOSING PARENTHESIS
0319  e405dd  		JNZ	ERR14	;IF NOT, RAISE EXPECTED PAREN. ERROR
031a  620000  		INX	IRAM	;POINT NEXT BYTE
031b  807000  		STC		;SET CARRY	?
031c  d00000  		RET			?
031d  bc0002  RNDMZ:	INP	A,2	
031e  438213  		STR	SEED1,A	
031f  9c2207  		ANI	A,0X7	
0320  9c6800  RNDMZL:	DCR	A	
0321  e40320  		JNZ	RNDMZL	
0322  bc0002  		INP	A,2	
0323  9fd000  		RAL	A	
0324  9c32aa  		XRI	A,0B10101010	
0325  438214  		STR	SEED2,A	
0326  f002de  		JMP	RNDML0	
0327  6c0013  RNDMRST:	LXI	IROM,SEED_DATA	
0328  5c0300  		LDX	A,(IROM)	
0329  438213  		STR	SEED1,A	
032a  660000  		INX	IROM	
032b  5c0300  		LDX	A,(IROM)	
032c  438214  		STR	SEED2,A	
032d  660000  		INX	IROM	
032e  5c0300  		LDX	A,(IROM)	
032f  438215  		STR	SEED3,A	
0330  660000  		INX	IROM	
0331  5c0300  		LDX	A,(IROM)	
0332  438216  		STR	SEED4,A	
0333  f002de  		JMP	RNDML0	
0334  5c0100  GETVARADRS:	LDX	A,(IRAM)	;GET POSSIBLE VARIABLE NAME
0335  9c02c0  		ADI	A,0XC0	;A-Z OR A-Z
0336  de0000  		RNC		;RETURN IF NOT	?
0337  620000  		INX	IRAM	;POINT NEXT CHARACTER IN DATA RAM
0338  9c221f  		ANI	A,0B00011111	;MASK LOWER BITS
0339  9c6800  		DCR	A	;ADJUST TO ZERO BASE
033a  9fc000  		RLC	A	;MULTIPLY BY 2
033b  040048  		MVI	L,LO(VARSTRT)	;CALCULATE ADDRESS
033c  080000  		MVI	H,HI(VARSTRT)	
033d  878000  		ADD	L,A	
033e  881200  		ACI	H,0	
033f  5c0100  		LDX	A,(IRAM)	;AN ARRAY? TBX
0340  9c0b28  		CPI	A,'('	;OPEN PARENTHESIS
0341  e00344  		JZ	ARRYADRS	
0342  807000  		STC		;SET CARRY	?
0343  d00000  		RET		;DONE AND RETURN	?
0344  2c0000  ARRYADRS:	MOV	E,M	;GET ARRAY START ADDRESS IN DE TBX START
0345  840201  		ADI	L,1	
0346  881200  		ACI	H,0	
0347  300000  		MOV	D,M	
0348  a20300  		PUSH	D	;SAVE IT ON PP STACK
0349  a18300  		PUSH	E	
034a  620000  		INX	IRAM	;POINT NEXT PROGRAM BYTE
034b  c0027b  		CALL	EXPR	;GET ARRAY FIRST INDEX
034c  5c0100  		LDX	A,(IRAM)	;GET NEXT BYTE
034d  9c0b29  		CPI	A,')'	;MUST BE A CLOSED PARENTHESIS?
034e  e405c1  		JNZ	ERR0	;IF NOT, RAISE A SYNTAX ERROR
034f  620000  		INX	IRAM	;POINT NEXT PROGRAM BYTE
0350  ac0200  		POP	E	;GET INDEX IN DE
0351  b00200  		POP	D	
0352  a40200  		POP	L	;GET ARRAY ADDRESS IN HL
0353  a80200  		POP	H	
0354  8dc000  		RLC	E	;DOUBLE INDEX
0355  925000  		RAL	D	
0356  858000  		ADD	L,E	;CALCULATE ARRAY INDEX ADDRESS
0357  8a1000  		ADC	H,D	
0358  807000  		STC		;SET CARRY AND RETURN	?
0359  d00000  		RET		; TBX END	?
035a  c00334  GETVAR:	CALL	GETVARADRS	
035b  de0000  		RNC		;RETURN IF NOT A VARIABLE	?
035c  3c0000  		MOV	A,M	;GET VARIABLE VALUE
035d  840201  		ADI	L,1	
035e  881200  		ACI	H,0	
035f  280000  		MOV	H,M	
0360  a10300  		PUSH	H	
0361  a38300  		PUSH	A	
0362  807000  		STC		;SET CARRY	?
0363  d00000  		RET			?
0364  5c0100  GETNUM:	LDX	A,(IRAM)	;GET FIRST CHARACTER
0365  9c0b2d  		CPI	A,'-'	;IS IT A NEAGTIVE NUMBER?
0366  e40371  		JNZ	GETNUMC0	;IF NOT, CONTINUE
0367  620000  		INX	IRAM	;POINT NEXT CHARACTER IN DATA RAM
0368  5c0100  		LDX	A,(IRAM)	GET NEXT CHARACTER
0369  c00378  		CALL	CHKNUM	;IS THIS A NUMERIC DIGIT?
036a  de0000  		RNC		;IF NOT RETURN WITH CARRY RESET	?
036b  c004c0  		CALL	ASC2BIN	;GET NUMBER IN HL
036c  c00428  		CALL	TWOCMP	;NEGATE THE RESULT
036d  a10300  		PUSH	H	;PUT RESULT ON STACK
036e  a08300  		PUSH	L	
036f  807000  		STC		;SET CARRY	?
0370  d00000  		RET			?
0371  c00378  GETNUMC0:	CALL	CHKNUM	;IS THIS A NUMERIC DIGIT?
0372  de0000  		RNC		;RETURN IF NOT	?
0373  c004c0  		CALL	ASC2BIN	
0374  a10300  		PUSH	H	;PUT RESULT ON STACK
0375  a08300  		PUSH	L	
0376  807000  		STC		;SET CARRY AND RETURN	?
0377  d00000  		RET			?
0378  9c0b3a  CHKNUM:	CPI	A,'9'+1	;DIGIT BIGGER THAN 9?
0379  de0000  		RNC		;IF SO, IT'S NOT A DIGIT AND RETURN WITH NO CARRY	?
037a  9c0b30  		CPI	A,'0'	;DIGIT SMALLER THAN 0?
037b  e8037e  		JC	CHKNUMC	;IF SO, CONTINUE
037c  807000  		STC		;SET CARRY AND RETURN	?
037d  d00000  		RET			?
037e  9fa800  CHKNUMC:	OR	A,A	;RESET CARRY AND RETURN
037f  d00000  		RET			?
0380  b40200  STORE:	POP	C	
0381  b80200  		POP	B	
0382  a40200  		POP	L	
0383  a80200  		POP	H	
0384  228000  		MOV	M,C	
0385  840201  		ADI	L,1	
0386  881200  		ACI	H,0	
0387  230000  		MOV	M,B	
0388  9fa000  		AND	A,A	
0389  d00000  		RET			?
038a  b40200  ADD:	POP	C	
038b  b80200  		POP	B	
038c  a40200  		POP	L	
038d  a80200  		POP	H	
038e  868000  		ADD	L,C	
038f  8b1000  		ADC	H,B	
0390  a10300  		PUSH	H	
0391  a08300  		PUSH	L	
0392  9fa800  		OR	A,A	;RESET CARRY AND RETURN
0393  d00000  		RET			?
0394  a40200  SUB:	POP	L	
0395  a80200  		POP	H	
0396  c00428  		CALL	TWOCMP	
0397  390000  		MOV	B,H	
0398  348000  		MOV	C,L	
0399  a40200  		POP	L	
039a  a80200  		POP	H	
039b  868000  		ADD	L,C	
039c  8b1000  		ADC	H,B	
039d  a10300  		PUSH	H	
039e  a08300  		PUSH	L	
039f  9fa800  		OR	A,A	;RESET CARRY AND RETURN
03a0  d00000  		RET			?
03a1  180000  MUL:	MVI	B,0	
03a2  a40200  		POP	L	
03a3  a80200  		POP	H	
03a4  3d0000  		MOV	A,H	
03a5  9c0b80  		CPI	A,0B10000000	
03a6  e803a8  		JC	MULC0	
03a7  c003b8  		CALL	NINOX	
03a8  2c8000  MULC0:	MOV	E,L	
03a9  310000  		MOV	D,H	
03aa  a40200  		POP	L	
03ab  a80200  		POP	H	
03ac  3d0000  		MOV	A,H	
03ad  9c0b80  		CPI	A,0B10000000	
03ae  e803b0  		JC	MULC1	
03af  c003b8  		CALL	NINOX	
03b0  c003ba  MULC1:	CALL	MULT	
03b1  986800  		DCR	B	
03b2  e403b4  		JNZ	MULC2	
03b3  c00428  		CALL	TWOCMP	
03b4  a10300  MULC2:	PUSH	H	
03b5  a08300  		PUSH	L	
03b6  9fa800  		OR	A,A	;RESET CARRY AND RETURN
03b7  d00000  		RET			?
03b8  986000  NINOX:	INR	B	
03b9  f00428  		JMP	TWOCMP	
03ba  a30300  MULT:	PUSH	B	
03bb  390000  		MOV	B,H	
03bc  348000  		MOV	C,L	
03bd  080000  		MVI	H,0	
03be  040000  		MVI	L,0	
03bf  1c0011  		MVI	A,17	
03c0  9b5800  MULTL:	RAR	B	
03c1  96d800  		RAR	C	
03c2  ec03c6  		JNC	MULTC	
03c3  858000  		ADD	L,E	
03c4  8a1000  		ADC	H,D	
03c5  807000  		STC		;SET CARRY	?
03c6  895800  MULTC:	RAR	H	
03c7  84d800  		RAR	L	
03c8  9c6800  		DCR	A	
03c9  e403c0  		JNZ	MULTL	
03ca  2b0000  		MOV	H,B	
03cb  268000  		MOV	L,C	
03cc  b80200  		POP	B	
03cd  d00000  		RET			?
03ce  180000  DIV:	MVI	B,0	
03cf  a40200  		POP	L	
03d0  a80200  		POP	H	
03d1  3d0000  		MOV	A,H	
03d2  9c0b80  		CPI	A,0B10000000	
03d3  e803d5  		JC	DIVC0	
03d4  c003b8  		CALL	NINOX	
03d5  2c8000  DIVC0:	MOV	E,L	
03d6  310000  		MOV	D,H	
03d7  a40200  		POP	L	
03d8  a80200  		POP	H	
03d9  3d0000  		MOV	A,H	
03da  9c0b80  		CPI	A,0B10000000	
03db  e803dd  		JC	DIVC1	
03dc  c003b8  		CALL	NINOX	
03dd  c0042d  DIVC1:	CALL	XHLDE	
03de  880b00  		CPI	H,0	
03df  e403e2  		JNZ	DIVC	
03e0  840b00  		CPI	L,0	
03e1  e005d1  		JZ	ERR8	
03e2  c003ea  DIVC:	CALL	DIVD	
03e3  986800  		DCR	B	
03e4  e403e6  		JNZ	DIVC2	
03e5  c00428  		CALL	TWOCMP	
03e6  a10300  DIVC2:	PUSH	H	
03e7  a08300  		PUSH	L	
03e8  9fa800  		OR	A,A	;RESET CARRY AND RETURN
03e9  d00000  		RET			?
03ea  a30300  DIVD:	PUSH	B	
03eb  180001  		MVI	B,1	
03ec  3d0000  DIVDL1:	MOV	A,H	
03ed  9c2240  		ANI	A,0X40	
03ee  e403f3  		JNZ	DIVDC0	
03ef  848000  		ADD	L,L	
03f0  891000  		ADC	H,H	
03f1  986000  		INR	B	
03f2  f003ec  		JMP	DIVDL1	
03f3  430208  DIVDC0:	STR	COUNT,B	
03f4  390000  		MOV	B,H	
03f5  348000  		MOV	C,L	
03f6  080000  		MVI	H,0	
03f7  040000  		MVI	L,0	
03f8  8e8800  DIVDL2:	SUB	E,C	
03f9  931800  		SBB	D,B	
03fa  ec040a  		JNC	DIVDC2	
03fb  8e8000  		ADD	E,C	
03fc  931000  		ADC	D,B	
03fd  848000  		ADD	L,L	
03fe  891000  		ADC	H,H	
03ff  5c0008  		LDR	A,COUNT	
0400  9c6800  		DCR	A	
0401  e00408  		JZ	DIVDE	
0402  438208  DIVDC1:	STR	COUNT,A	
0403  c0042d  		CALL	XHLDE	
0404  848000  		ADD	L,L	
0405  891000  		ADC	H,H	
0406  c0042d  		CALL	XHLDE	
0407  f003f8  		JMP	DIVDL2	
0408  b80200  DIVDE:	POP	B	
0409  d00000  		RET			?
040a  848000  DIVDC2:	ADD	L,L	
040b  891000  		ADC	H,H	
040c  840201  		ADI	L,1	
040d  881200  		ACI	H,0	
040e  5c0008  		LDR	A,COUNT	
040f  9c6800  		DCR	A	
0410  e00408  		JZ	DIVDE	
0411  f00402  		JMP	DIVDC1	
0412  a40200  MODULO:	POP	L	;GET DIVIDEND OFF PP STACK
0413  a80200  		POP	H	
0414  ac0200  		POP	E	;GET DIVISOR OF PP STACK
0415  b00200  		POP	D	
0416  a20300  		PUSH	D	;PUSH DIVIDEND ON PP STACK TWICE
0417  a18300  		PUSH	E	
0418  a10300  		PUSH	H	
0419  a08300  		PUSH	L	
041a  a20300  		PUSH	D	;PUSH DIVISOR ON PP STACK
041b  a18300  		PUSH	E	
041c  a10300  		PUSH	H	
041d  a08300  		PUSH	L	
041e  c003ce  		CALL	DIV	;PERFORM INTEGER DIVISION
041f  c003a1  		CALL	MUL	;MULTIPLY THE TWO VALUES
0420  f00394  		JMP	SUB	;SUBTRACT THE TWO VALUES
0421  a40200  NEG:	POP	L	
0422  a80200  		POP	H	
0423  c00428  		CALL	TWOCMP	
0424  a10300  		PUSH	H	
0425  a08300  		PUSH	L	
0426  9fa800  		OR	A,A	;RESET CARRY AND RETURN
0427  d00000  		RET			?
0428  8832ff  TWOCMP:	XRI	H,0XFF	
0429  8432ff  		XRI	L,0XFF	
042a  840201  		ADI	L,1	
042b  881200  		ACI	H,0	
042c  d00000  		RET			?
042d  3e0000  XHLDE:	MOV	A,D	
042e  310000  		MOV	D,H	
042f  2b8000  		MOV	H,A	
0430  3d8000  		MOV	A,E	
0431  2c8000  		MOV	E,L	
0432  278000  		MOV	L,A	
0433  d00000  		RET			?
0434  6c0000  CINIT:	LXI	IROM,INIT_DATA	;COPY INITIALIZATION DATA TO RAM
0435  68ff00  		LXI	IRAM,CURLBL+0XFF00	
0436  5c0300  CINITL:	LDX	A,(IROM)	
0437  438600  		STX	IRAM,A	
0438  660000  		INX	IROM	
0439  620000  		INX	IRAM	
043a  6d0019  		CPI	IROM,KEYTBL	
043b  e40436  		JNZ	CINITL	
043c  680048  ZEROVAR:	LXI	IRAM,VARSTRT	;ZERO A-Z VARIABLES
043d  180000  		MVI	B,0	
043e  1c0034  		MVI	A, 26*2	
043f  430600  CINITCL:	STX	IRAM,B	
0440  620000  		INX	IRAM	
0441  9c6800  		DCR	A	
0442  e4043f  		JNZ	CINITCL	
0443  d00000  		RET			?
0444  d00000  WINIT:	RET			?
0445  1c003e  GETLINE:	MVI	A,'>'	;DISPLAY PROMPT
0446  c005a6  		CALL	CHROUT	
0447  680000  BUFIN:	LXI	IRAM, BUFSTRT	;COPY INPUTTED CHARACTERS TO INPUT BUFFER
0448  180048  		MVI	B, 72	;SET MAXIMUM LINE LENGTH
0449  c005a0  BUFINL:	CALL	CHRIN	
044a  9c0b0d  		CPI	A,CR	;AT END OF INPUT LINE? BYOC 24
044b  e00453  		JZ	BUFEND	;IF SO, GO PROCESS
044c  9c0b08  		CPI	A,BS	;A BACKSPACE?
044d  e0045a  		JZ	RUBOUT	;IF SO, DO A RUBOUT
044e  438600  		STX	IRAM,A	;OTHERWISE, STRORE IT IN DATA RAM
044f  620000  		INX	IRAM	;POINT NEXT POSITION IN DATA RAM
0450  986800  		DCR	B	;REDUCE CHACTER COUNT BY 1
0451  e005c3  		JZ	ERR1	;IF LINE LENGTH EXCEEDED, GENERATE ERROR
0452  f00449  		JMP	BUFINL	;GET NEXT CHARACTER
0453  1c000d  BUFEND:	MVI	A,CR	;STORE LAST CHARACTER AND RETURN
0454  438600  		STX	IRAM,A	
0455  1c0000  		MVI	A,0	
0456  43820a  		STR	ZONE,A	
0457  980b48  		CPI	B,72	;BUFFER EMPTY?
0458  e00445  		JZ	GETLINE	;IF SO, DO NOTHING
0459  d00000  		RET	0	
045a  980b48  RUBOUT:	CPI	B,72	;AT BEGINNING OF LINE?
045b  e00449  		JZ	BUFINL	;IF SO, DO NOTHING
045c  1c0020  		MVI	A,' '	;SEND ESC
045d  c005a6  		CALL	CHROUT	
045e  1c0008  		MVI	A,BS	;SEND ]
045f  c005a6  		CALL	CHROUT	
0460  630000  		DCX	IRAM	;OTHERWISE, BACK UP ON POSITION
0461  986000  		INR	B	
0462  f00449  		JMP	BUFINL	
0463  680000  TRNS:	LXI	IRAM,BUFSTRT	;POINT IRAM TO INPUT BUFFER START
0464  080000  		MVI	H,HI(BUFSTRT)	;POINT HL TO INPUT BUFFER START
0465  040000  		MVI	L,LO(BUFSTRT)	
0466  5c0100  TRNSL0:	LDX	A,(IRAM)	;GET BYTE
0467  9c0b0d  		CPI	A,CR	;REACHED END OF LINE?
0468  e0048c  		JZ	TRNSE	;IF SO, DONE
0469  9c0b22  		CPI	A,'"'	;A LITERAL?
046a  e0047d  		JZ	TRNSC1	;IF SO, COPY IT IGNORING TEXT
046b  a38300  		PUSH	A	;CHECK FOR KEYWORD
046c  a10300  		PUSH	H	
046d  a08300  		PUSH	L	
046e  c00247  		CALL	GETKEY	;IS IT A KEYWORD?
046f  a40200  		POP	L	
0470  a80200  		POP	H	
0471  bc0200  		POP	A	
0472  ec0478  		JNC	TRNSC0	;IF NOT, COPY BYTE AS IS
0473  940280  		ADI	C,0B10000000	;IF A KEYWORD, SET MS BIT
0474  228000  		MOV	M,C	;STORE IT BACK IN INPUT BUFFER
0475  840201  		ADI	L,1	;INCREMENT HL
0476  881200  		ACI	H,0	
0477  f00466  		JMP	TRNSL0	;PROCESS NEXT BYTE
0478  238000  TRNSC0:	MOV	M,A	;STORE BYTE IN INPUT BUFFER
0479  620000  		INX	IRAM	;POINT NEXT BYTE
047a  840201  		ADI	L,1	
047b  881200  		ACI	H,0	
047c  f00466  		JMP	TRNSL0	;PROCESS NEXT BYTE
047d  238000  TRNSC1:	MOV	M,A	;STORE BYTE BACK  IN INPUT BUFFER
047e  620000  		INX	IRAM	;POINT NEXT BYTE
047f  840201  		ADI	L,1	
0480  881200  		ACI	H,0	
0481  5c0100  		LDX	A,(IRAM)	;GET NEXT PROGRAM BYTE
0482  9c0b22  		CPI	A,'"'	;ENDING QUOTATION MARK?
0483  e00487  		JZ	TRNSC2	;IF SO, CONTINUE LOOKING FOR KEYWORDS
0484  9c0b0d  		CPI	A,CR	
0485  e005cb  		JZ	ERR5	;RAISE EXPECTED CLOSED QUOTE ERROR
0486  f0047d  		JMP	TRNSC1	;KEEP LOOKING FOR CLOSED QUOTE
0487  238000  TRNSC2:	MOV	M,A	;STORE BYTE BACK IN INPUT BUFFER
0488  620000  		INX	IRAM	;POINT NEXT BYTE
0489  840201  		ADI	L,1	
048a  881200  		ACI	H,0	
048b  f00466  		JMP	TRNSL0	;BACK FOR MORE KEYWORD CHECKS
048c  238000  TRNSE:	MOV	M,A	;UPDATE LINE END  (CR)
048d  d00000  		RET		;DONE	?
048e  6c0019  KEYOUT:	LXI	IROM,KEYTBL	;POINT IROM TO START OF KEYWORD TABLE
048f  9c227f  		ANI	A,0B01111111	;MASK OFF MSBIT
0490  9fa800  KEYOUTL0:	OR	A,A	;FOUND THE KEYWORD?
0491  e0049a  		JZ	KEYOUTC1	;IF SO, CONTINUE
0492  9c6800  		DCR	A	;DECREMENT KEYWORD COUNTER
0493  540300  KEYOUTL1:	LDX	C,(IROM)	;GET KEYWORD BYTE
0494  940b80  		CPI	C,0B10000000	;LAST CHARACTER OF KEYWORD?
0495  ec0498  		JNC	KEYOUTC0	;IF SO, CONTINUE
0496  660000  		INX	IROM	;INCREMENT IROM
0497  f00493  		JMP	KEYOUTL1	;DO AGAIN
0498  660000  KEYOUTC0:	INX	IROM	;INCREMENT IROM
0499  f00490  		JMP	KEYOUTL0	;DO AGAIN
049a  5c0300  KEYOUTC1:	LDX	A,(IROM)	;PRINT CHARACTER
049b  9c0b80  		CPI	A,0B10000000	;LAST CHARACTER OF KEYWORD?
049c  ec04a0  		JNC	KEYOUTE	;IF SO, CONTINUE
049d  c005a6  		CALL	CHROUT	;PRINT IT
049e  660000  		INX	IROM	;INCREMENT IROM
049f  f0049a  		JMP	KEYOUTC1	;DO AGAIN
04a0  9c227f  KEYOUTE:	ANI	A,0B01111111	;MASK OFF MSBIT
04a1  f005a6  		JMP	CHROUT	
04a2  680000  TSTL:	LXI	IRAM,BUFSTRT	;PREPARE TO SCAN LINE BUFFER
04a3  5c0100  SKIPSPC:	LDX	A,(IRAM)	;SKIP ANY SPACES
04a4  9c0b20  		CPI	A,' '	
04a5  620000  		INX	IRAM	
04a6  e004a3  		JZ	SKIPSPC	
04a7  630000  		DCX	IRAM	
04a8  240200  		MOV	L,IRAML	;ASSUME A COMMAND
04a9  280280  		MOV	H,IRAMH	
04aa  408206  		STR	TXTSTRT,L	
04ab  410207  		STR	TXTSTRT+1,H	
04ac  040000  		MVI	L,0	
04ad  080000  		MVI	H,0	
04ae  408200  		STR	CURLBL,L	
04af  410201  		STR	CURLBL+1,H	
04b0  9c0b3a  		CPI	A,':'	;IS IT A COMMAND (NON-NUMERIC CHARACTER)?
04b1  de0000  		RNC		;IF SO, RETURN WITH NO CARRY AND CURLBL=0	?
04b2  9c0b30  		CPI	A,'0'	;IS WHAT IS LEFT IS NON-NUMERIC?
04b3  ec04b7  		JNC	LBL	
04b4  9fa800  		OR	A,A	;RESET CARRY AND RETURN
04b5  d00000  		RET			?
04b6  e805c1  		JC	ERR0	;IF SO, THEN IT'S A SYNTAX ERROR
04b7  c004c0  LBL:	CALL	ASC2BIN	;IF NUMERIC, CAPTURE AND STORE IN CURLBL
04b8  408200  		STR	CURLBL,L	
04b9  410201  		STR	CURLBL+1,H	
04ba  2c0200  		MOV	E,IRAML	
04bb  300280  		MOV	D,IRAMH	
04bc  418206  		STR	TXTSTRT,E	
04bd  420207  		STR	TXTSTRT+1,D	
04be  807000  		STC		;SET CARRY AND RETURN	?
04bf  d00000  		RET			?
04c0  080000  ASC2BIN:	MVI	H,0	
04c1  040000  		MVI	L,0	
04c2  5c0100  ASC2BINL:	LDX	A,(IRAM)	;GET PROGRAM BYTE
04c3  c00378  		CALL	CHKNUM	;GET VALUE
04c4  de0000  		RNC		;DONE WHEN NON-ASCII DIGIT ENCOUNTERED	?
04c5  9c220f  		ANI	A,0B00001111	;STRIP BACK TO NUMERIC VALUE
04c6  9c0b0a  		CPI	A,10	;IS VALUE GREATER THAN 10?
04c7  de0000  		RNC		;IF SO, DONE AND RETURN	?
04c8  620000  		INX	IRAM	;POINT TO NEXT CHARACTER
04c9  390000  		MOV	B,H	;MULTIPLY HL BY 10
04ca  348000  		MOV	C,L	
04cb  848000  		ADD	L,L	;2*HL
04cc  891000  		ADC	H,H	
04cd  e805c5  		JC	ERR2	;OVERFLOW ERROR
04ce  848000  		ADD	L,L	;4*HL
04cf  891000  		ADC	H,H	
04d0  e805c5  		JC	ERR2	;OVERFLOW ERROR
04d1  868000  		ADD	L,C	;5*HL
04d2  8b1000  		ADC	H,B	
04d3  e805c5  		JC	ERR2	;OVERFLOW ERROR
04d4  848000  		ADD	L,L	;10*HL
04d5  891000  		ADC	H,H	
04d6  e805c5  		JC	ERR2	;OVERFLOW ERROR
04d7  878000  		ADD	L,A	;10*HL+NEW DIGIT VALUE
04d8  881200  		ACI	H,0	
04d9  e805c5  		JC	ERR2	;OVERFLOW ERROR
04da  f004c2  		JMP	ASC2BINL	
04db  a20300  INSRT:	PUSH	D	;SAVE DE
04dc  a18300  		PUSH	E	
04dd  440006  		LDR	L,TXTSTRT	;GET TEXT START ADDRESS IN IRAM
04de  480007  		LDR	H,TXTSTRT+1	
04df  600000  		LDHL	IRAM	;POINT IRAM TO TEXT
04e0  440000  		LDR	L,CURLBL	
04e1  480001  		LDR	H,CURLBL+1	
04e2  9ca800  		OR	A,L	
04e3  e005c7  		JZ	ERR3	;IF A COMMAND, ERROR
04e4  390000  		MOV	B,H	;SAVE LABEL OF NEW LINE
04e5  348000  		MOV	C,L	
04e6  100001  INSRTF1:	MVI	D,1	;COUNT CHARATERS IN NEW LINE
04e7  5c0100  INSRTL2:	LDX	A,(IRAM)	
04e8  9c0b0d  		CPI	A,CR	
04e9  e004ed  		JZ	INSRTC1	
04ea  906000  		INR	D	
04eb  620000  		INX	IRAM	
04ec  f004e7  		JMP	INSRTL2	
04ed  420208  INSRTC1:	STR	COUNT,D	;STORE COUNT OF NEW LINE
04ee  440006  		LDR	L,TXTSTRT	;POINT HL TO PROGRAM START
04ef  480007  		LDR	H,TXTSTRT+1	
04f0  600000  		LDHL	IRAM	;POINT IRAM TO START OF TEXT
04f1  440002  		LDR	L,PRGSTRT	;POINT HL TO PROGRAM START
04f2  480003  		LDR	H,PRGSTRT+1	
04f3  c00591  INSRTL4:	CALL	CKPEND	;PROGRAM END SAME AS PROGRAM BEGIN?
04f4  e00579  		JZ	APPEND	;IF SO, THEN APPEND NEW LINE
04f5  830900  		CMP	M,B	;COMPARE MSB OLD LINE AND NEW LINE LABELS
04f6  e004ff  		JZ	INSRTC2	;IF THE SAME, GO CHECK LSBS
04f7  ec0506  		JNC	HERE	;IF NEW LINE LABEL GREATER, INSERT NEW LINE HERE
04f8  840201  		ADI	L,1	;OTHERWISE, POINT TO NEXT OLD LINE (INX HL)
04f9  881200  		ACI	H,0	
04fa  840201  INSRTL3:	ADI	L,1	; (INX HL)
04fb  881200  		ACI	H,0	
04fc  840000  		ADD	L,M	;ADD COUNT TO POINT NEXT OLD LINE
04fd  881200  		ACI	H,0	
04fe  f004f3  		JMP	INSRTL4	;THEN TRY AGAIN
04ff  840201  INSRTC2:	ADI	L,1	;POINT TO LSB OF OLD LINE LABEL
0500  881200  		ACI	H,0	
0501  828900  		CMP	M,C	;COMPARE LSB OF OLD LINE TO NEW LINE
0502  e00543  		JZ	OVRDEL	;LABELS ARE SAME, DELETE OLD THEN INSERT NEW
0503  e804fa  		JC	INSRTL3	;IF NEW LINE LABEL LESS, KEEP LOOKING
0504  840a01  		SUI	L,1	;POINT BACK TO START OF OLD LINE
0505  881a00  		SBI	H,0	
0506  840a01  HERE:	SUI	L,1	
0507  881a00  		SBI	H,0	
0508  2c0200  		MOV	E,IRAML	;SAVE START OF NEW LINE TEXT
0509  300280  		MOV	D,IRAMH	
050a  a20300  		PUSH	D	
050b  a18300  		PUSH	E	
050c  310000  		MOV	D,H	
050d  2c8000  		MOV	E,L	
050e  440004  		LDR	L,PRGEND	;POINT IRAM TO NEW INSERTION POINT
050f  480005  		LDR	H,PRGEND+1	
0510  a10300  		PUSH	H	
0511  a08300  		PUSH	L	
0512  5c0008  		LDR	A,COUNT	;COMPUTE NEW PROGRAM END
0513  9c0203  		ADI	A,3	
0514  878000  		ADD	L,A	
0515  881200  		ACI	H,0	
0516  c00597  		CALL	MEMTEST	;CHECK FOR OUT OF MEMORY ERROR
0517  e805df  		JC	ERR15	;IF SO, RAISE OUT OF MEMORY ERROR
0518  600000  		LDHL	IRAM	
0519  408204  		STR	PRGEND,L	;UPDATE PROGRAM END
051a  410205  		STR	PRGEND+1,H	
051b  a40200  		POP	L	
051c  a80200  		POP	H	
051d  3c0000  INSRTL5:	MOV	A,M	
051e  438600  		STX	IRAM,A	
051f  630000  		DCX	IRAM	
0520  840a01  		SUI	L,1	
0521  881a00  		SBI	H,0	
0522  3c0280  		MOV	A,IRAMH	
0523  9e0900  		CMP	A,D	
0524  e4051d  		JNZ	INSRTL5	
0525  3c0200  		MOV	A,IRAML	
0526  9d8900  		CMP	A,E	
0527  e4051d  		JNZ	INSRTL5	
0528  8c0201  		ADI	E,1	
0529  901200  		ACI	D,0	
052a  2a0000  		MOV	H,D	
052b  258000  		MOV	L,E	
052c  600000  		LDHL	IRAM	
052d  4c0000  		LDR	E,CURLBL	
052e  500001  		LDR	D,CURLBL+1	
052f  420600  		STX	IRAM,D	
0530  620000  		INX	IRAM	
0531  418600  		STX	IRAM,E	
0532  620000  		INX	IRAM	
0533  5c0008  		LDR	A,COUNT	
0534  9c6000  		INR	A	
0535  438600  		STX	IRAM,A	
0536  620000  		INX	IRAM	
0537  a40200  		POP	L	
0538  a80200  		POP	H	
0539  3c0000  INSRTL6:	MOV	A,M	
053a  438600  		STX	IRAM,A	
053b  9c0b0d  		CPI	A,CR	
053c  e00541  		JZ	INSRTE	
053d  620000  		INX	IRAM	
053e  840201  		ADI	L,1	
053f  880200  		ADI	H,0	
0540  f00539  		JMP	INSRTL6	
0541  b00200  INSRTE:	POP	D	
0542  d00000  		RET			?
0543  840a01  OVRDEL:	SUI	L,1	;
0544  881a00  		SBI	H,0	
0545  a10300  		PUSH	H	
0546  a08300  		PUSH	L	
0547  840203  		ADI	L,3	
0548  881200  		ACI	H,0	
0549  800b0d  INSRTL7:	CPI	M,CR	
054a  e0054e  		JZ	INSRTC3	
054b  840201  		ADI	L,1	
054c  881200  		ACI	H,0	
054d  f00549  		JMP	INSRTL7	
054e  840201  INSRTC3:	ADI	L,1	
054f  881200  		ACI	H,0	
0550  310000  		MOV	D,H	
0551  2c8000  		MOV	E,L	
0552  440004  		LDR	L,PRGEND	
0553  480005  		LDR	H,PRGEND+1	
0554  8a0900  		CMP	H,D	;AT LAST LINE?
0555  e4055b  		JNZ	INSRTC4	;IF NOT, CONTINUE
0556  858900  		CMP	L,E	
0557  e4055b  		JNZ	INSRTC4	;IF NOT, CONTINUE
0558  a40200  		POP	L	;GET NEW PROGRAM END INTO HL
0559  a80200  		POP	H	
055a  f00571  		JMP	INSRTC5	;IF SO, DONE
055b  840201  INSRTC4:	ADI	L,1	
055c  881200  		ACI	H,0	
055d  390000  		MOV	B,H	
055e  348000  		MOV	C,L	
055f  2a0000  		MOV	H,D	
0560  258000  		MOV	L,E	
0561  600000  		LDHL	IRAM	
0562  a40200  		POP	L	
0563  a80200  		POP	H	
0564  5c0100  INSRTL8:	LDX	A,(IRAM)	
0565  238000  		MOV	M,A	
0566  840201  		ADI	L,1	
0567  881200  		ACI	H,0	
0568  620000  		INX	IRAM	
0569  300280  		MOV	D,IRAMH	
056a  930900  		CMP	D,B	
056b  e40564  		JNZ	INSRTL8	
056c  2c0200  		MOV	E,IRAML	
056d  8e8900  		CMP	E,C	
056e  e40564  		JNZ	INSRTL8	
056f  840a01  		SUI	L,1	
0570  881a00  		SBI	H,0	
0571  408204  INSRTC5:	STR	PRGEND,L	
0572  410205  		STR	PRGEND+1,H	
0573  5c0008  		LDR	A,COUNT	
0574  9c0b01  		CPI	A,1	
0575  e404dd  		JNZ	INSRT+2	
0576  ac0200  		POP	E	
0577  b00200  		POP	D	
0578  d00000  		RET			?
0579  230000  APPEND:	MOV	M,B	;PUT MSB OF CURLBL IN NEW PROGRAM LINE
057a  840201  		ADI	L,1	
057b  881200  		ACI	H,0	
057c  228000  		MOV	M,C	;PUT LSB OF CURLBL IN NEW PROGRAM LINE 
057d  840201  		ADI	L,1	
057e  881200  		ACI	H,0	
057f  5c0008  		LDR	A,COUNT	;PUT LINE COUNT+1 IN NEW PROGRAM LINE
0580  9c6000  		INR	A	
0581  238000  		MOV	M,A	
0582  630000  		DCX	IRAM	;POINT NEW LINE BACK ONE BYTE
0583  840201  APPENDL:	ADI	L,1	;POINT NEXT OLD LINE BYTE
0584  881200  		ACI	H,0	
0585  620000  		INX	IRAM	;POINT NEXT NEW LINE
0586  5c0100  		LDX	A,(IRAM)	;GET NEW BYTE
0587  238000  		MOV	M,A	;PUT IN NEW LINE
0588  9c0b0d  		CPI	A,13	;CARRIAGE RETURN?
0589  e40583  		JNZ	APPENDL	;IF NOT, KEEP ADDING NEW BYTES
058a  840201  		ADI	L,1	;IF SO, POINT NEXT NEW LINE BYTE 
058b  881200  		ACI	H,0	
058c  408204  		STR	PRGEND,L	;UPDATE PROGRAM END
058d  410205  		STR	PRGEND+1,H	
058e  ac0200  		POP	E	;RESTORE DE
058f  b00200  		POP	D	
0590  d00000  		RET			?
0591  5c0005  CKPEND:	LDR	A,PRGEND+1	;NEW LINE INSERTED; DONE
0592  9d0900  		CMP	A,H	
0593  dc0000  		RNZ		;DELETE CURRENT PROGRAM LINE	?
0594  5c0004  		LDR	A,PRGEND	
0595  9c8900  		CMP	A,L	;CR?
0596  d00000  		RET			?
0597  5c0018  MEMTEST:	LDR	A,MEND+1	;PROGRAM END EXCEEDS MEMORY END?
0598  9d0900  		CMP	A,H	;CHECK MSB OF MEMORY END
0599  e0059b  		JZ	MEMTSTC	;SAME, CHECK LSB
059a  da0000  		RC		;IF SO, RETURN WITH CARRY SET	?
059b  5c0017  MEMTSTC:	LDR	A,MEND	;CHECK LSB OF MEMORY END
059c  9c8900  		CMP	A,L	;PAST MEMORY END?
059d  de0000  		RNC		;IF NOT, RETURN WITH CARRY RESET	?
059e  807000  		STC		;SET	?
059f  d00000  		RET		;RETURN WITH CARRY SET	?
05a0  bc0000  CHRIN:	INP	A,CNTR_PORT	;GET KEYBOARD/DISPLAY CONTROL BYTE
05a1  9c2240  		ANI	A,KBY_MASK	;CHARACTER AVAILABLE?
05a2  e005a0  		JZ	CHRIN	;IF NOT, KEEP CHECKING
05a3  bc0001  		INP	A,DATA_PORT	;INPUT ASCII CHARACTER
05a4  9c0b1b  		CPI	A,ESCAPE	;ESCAPE CODE?
05a5  e00005  		JZ	WSTART	;IF SO, DO A WARM START
05a6  a38300  CHROUT:	PUSH	A	;SAVE CHARACTER TO PRINT
05a7  5c000a  		LDR	A,ZONE	;INCREMENT ZONE COUNTER
05a8  9c6000  		INR	A	
05a9  43820a  		STR	ZONE,A	
05aa  bc0000  WAIT:	INP	A,CNTR_PORT	;GET KEYBOARD/DISPLAY CONTROL BYTE
05ab  9c2280  		ANI	A,DSP_MASK	;DISPLAY BUSY
05ac  e405aa  		JNZ	WAIT	;IF SO, KEEP CHECKING
05ad  bc0200  		POP	A	;RESTORE CHARACTER TO PRINT
05ae  a38101  		OUT	DATA_PORT,A	;OUTPUT ASCII CHARACTER
05af  d00000  		RET		;DONE AND RETURN	?
05b0  1c0000  NEWLINE:	MVI	A,0	
05b1  43820a  		STR	ZONE,A	
05b2  1c000d  		MVI	A,CR	;BYOC 24
05b3  f005a6  		JMP	CHROUT	
05b4  1c001b  CLRSCR:	MVI	A,27	
05b5  c005a6  		CALL	CHROUT	
05b6  1c005d  		MVI	A,93	
05b7  c005a6  		CALL	CHROUT	
05b8  1c0052  		MVI	A,82	
05b9  f005a6  		JMP	CHROUT	
05ba  5c0300  MSGOUT:	LDX	A,(IROM)	
05bb  9fa800  		OR	A,A	
05bc  d80000  		RZ			?
05bd  c005a6  		CALL	CHROUT	
05be  660000  		INX	IROM	
05bf  f005ba  		JMP	MSGOUT	
05c0  f005c0  WARM_BOOT:	JMP	WARM_BOOT	
05c1  040000  ERR0:	MVI	L,0	;SYNTAX ERROR
05c2  f005e5  		JMP	ERROR	
05c3  040001  ERR1:	MVI	L,1	;LINE OVERFLOW
05c4  f005e5  		JMP	ERROR	
05c5  040002  ERR2:	MVI	L,2	;NUMERIC OVERFLOW
05c6  f005e5  		JMP	ERROR	
05c7  040003  ERR3:	MVI	L,3	;BADLY FORMED COMMAND
05c8  f005e5  		JMP	ERROR	
05c9  040004  ERR4:	MVI	L,4	;EXPECTED END OF LINE
05ca  f005e5  		JMP	ERROR	
05cb  040005  ERR5:	MVI	L,5	;EXPECTED CLOSED QUOTE
05cc  f005e5  		JMP	ERROR	
05cd  040006  ERR6:	MVI	L,6	;UNKNOWN LINE NUMBER
05ce  f005e5  		JMP	ERROR	
05cf  040007  ERR7:	MVI	L,7	;EXPECTED VARIABLE NAME
05d0  f005e5  		JMP	ERROR	
05d1  040008  ERR8:	MVI	L,8	;DIVIDE BY ZERO
05d2  f005e5  		JMP	ERROR	
05d3  040009  ERR9:	MVI	L,9	;INVALID EXPRESSION+D612
05d4  f005e5  		JMP	ERROR	
05d5  04000a  ERR10:	MVI	L,10	;EXPECTED VARIABLE
05d6  f005e5  		JMP	ERROR	
05d7  04000b  ERR11:	MVI	L,11	;NO PROGRAM TO LOAD
05d8  f005e5  		JMP	ERROR	
05d9  04000c  ERR12:	MVI	L,12	;INVALID FUNCTION PARAMETER
05da  f005e5  		JMP	ERROR	
05db  04000d  ERR13:	MVI	L,13	;EXPECTED NUMBER
05dc  f005e5  		JMP	ERROR	
05dd  04000e  ERR14:	MVI	L,14	;EXPECTED PARENTHESIS
05de  f005e5  		JMP	ERROR	
05df  04000f  ERR15:	MVI	L,15	;OUT OF MEMORY
05e0  f005e5  		JMP	ERROR	
05e1  040010  ERR16:	MVI	L,16	;INVALID ARRAY INDEX
05e2  f005e5  		JMP	ERROR	
05e3  040011  ERR17:	MVI	L,17	;INVALID ARRAY (DIMENSION CONFLICT)
05e4  f005e5  		JMP	ERROR	
05e5  c005b0  ERROR:	CALL	NEWLINE	;NEXT LINE
05e6  6c00d2  		LXI	IROM,MSG_ERR0	
05e7  c005ba  		CALL	MSGOUT	
05e8  080000  		MVI	H,0	
05e9  140000  		MVI	C,0	
05ea  c00220  		CALL	NUMOUT	
05eb  6c00d9  		LXI	IROM,MSG_ERR1	
05ec  c005ba  		CALL	MSGOUT	
05ed  440000  		LDR	L,CURLBL	
05ee  480001  		LDR	H,CURLBL+1	
05ef  1400ff  		MVI	C,0XFF	
05f0  c00220  		CALL	NUMOUT	
05f1  f00005  		JMP	WSTART	
